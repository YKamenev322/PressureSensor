
PressureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08004ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  2000000c  08004ed8  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000170  08004ed8  00020170  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000131be  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027f8  00000000  00000000  000331f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000940  00000000  00000000  000359f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000818  00000000  00000000  00036330  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000576b  00000000  00000000  00036b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002d3e  00000000  00000000  0003c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003eff1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000024d4  00000000  00000000  0003f070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e44 	.word	0x08004e44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004e44 	.word	0x08004e44

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_frsub>:
 8000984:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000988:	e002      	b.n	8000990 <__addsf3>
 800098a:	bf00      	nop

0800098c <__aeabi_fsub>:
 800098c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000990 <__addsf3>:
 8000990:	0042      	lsls	r2, r0, #1
 8000992:	bf1f      	itttt	ne
 8000994:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000998:	ea92 0f03 	teqne	r2, r3
 800099c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a4:	d06a      	beq.n	8000a7c <__addsf3+0xec>
 80009a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ae:	bfc1      	itttt	gt
 80009b0:	18d2      	addgt	r2, r2, r3
 80009b2:	4041      	eorgt	r1, r0
 80009b4:	4048      	eorgt	r0, r1
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	bfb8      	it	lt
 80009ba:	425b      	neglt	r3, r3
 80009bc:	2b19      	cmp	r3, #25
 80009be:	bf88      	it	hi
 80009c0:	4770      	bxhi	lr
 80009c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4249      	negne	r1, r1
 80009e2:	ea92 0f03 	teq	r2, r3
 80009e6:	d03f      	beq.n	8000a68 <__addsf3+0xd8>
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	fa41 fc03 	asr.w	ip, r1, r3
 80009f0:	eb10 000c 	adds.w	r0, r0, ip
 80009f4:	f1c3 0320 	rsb	r3, r3, #32
 80009f8:	fa01 f103 	lsl.w	r1, r1, r3
 80009fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a00:	d502      	bpl.n	8000a08 <__addsf3+0x78>
 8000a02:	4249      	negs	r1, r1
 8000a04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a0c:	d313      	bcc.n	8000a36 <__addsf3+0xa6>
 8000a0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a12:	d306      	bcc.n	8000a22 <__addsf3+0x92>
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1a:	f102 0201 	add.w	r2, r2, #1
 8000a1e:	2afe      	cmp	r2, #254	; 0xfe
 8000a20:	d251      	bcs.n	8000ac6 <__addsf3+0x136>
 8000a22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2a:	bf08      	it	eq
 8000a2c:	f020 0001 	biceq.w	r0, r0, #1
 8000a30:	ea40 0003 	orr.w	r0, r0, r3
 8000a34:	4770      	bx	lr
 8000a36:	0049      	lsls	r1, r1, #1
 8000a38:	eb40 0000 	adc.w	r0, r0, r0
 8000a3c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	d1ed      	bne.n	8000a22 <__addsf3+0x92>
 8000a46:	fab0 fc80 	clz	ip, r0
 8000a4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a56:	bfaa      	itet	ge
 8000a58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a5c:	4252      	neglt	r2, r2
 8000a5e:	4318      	orrge	r0, r3
 8000a60:	bfbc      	itt	lt
 8000a62:	40d0      	lsrlt	r0, r2
 8000a64:	4318      	orrlt	r0, r3
 8000a66:	4770      	bx	lr
 8000a68:	f092 0f00 	teq	r2, #0
 8000a6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a70:	bf06      	itte	eq
 8000a72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a76:	3201      	addeq	r2, #1
 8000a78:	3b01      	subne	r3, #1
 8000a7a:	e7b5      	b.n	80009e8 <__addsf3+0x58>
 8000a7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8a:	d021      	beq.n	8000ad0 <__addsf3+0x140>
 8000a8c:	ea92 0f03 	teq	r2, r3
 8000a90:	d004      	beq.n	8000a9c <__addsf3+0x10c>
 8000a92:	f092 0f00 	teq	r2, #0
 8000a96:	bf08      	it	eq
 8000a98:	4608      	moveq	r0, r1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea90 0f01 	teq	r0, r1
 8000aa0:	bf1c      	itt	ne
 8000aa2:	2000      	movne	r0, #0
 8000aa4:	4770      	bxne	lr
 8000aa6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aaa:	d104      	bne.n	8000ab6 <__addsf3+0x126>
 8000aac:	0040      	lsls	r0, r0, #1
 8000aae:	bf28      	it	cs
 8000ab0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aba:	bf3c      	itt	cc
 8000abc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bxcc	lr
 8000ac2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	4770      	bx	lr
 8000ad0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad4:	bf16      	itet	ne
 8000ad6:	4608      	movne	r0, r1
 8000ad8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000adc:	4601      	movne	r1, r0
 8000ade:	0242      	lsls	r2, r0, #9
 8000ae0:	bf06      	itte	eq
 8000ae2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ae6:	ea90 0f01 	teqeq	r0, r1
 8000aea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_ui2f>:
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e004      	b.n	8000b00 <__aeabi_i2f+0x8>
 8000af6:	bf00      	nop

08000af8 <__aeabi_i2f>:
 8000af8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	bf48      	it	mi
 8000afe:	4240      	negmi	r0, r0
 8000b00:	ea5f 0c00 	movs.w	ip, r0
 8000b04:	bf08      	it	eq
 8000b06:	4770      	bxeq	lr
 8000b08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	e01c      	b.n	8000b4e <__aeabi_l2f+0x2a>

08000b14 <__aeabi_ul2f>:
 8000b14:	ea50 0201 	orrs.w	r2, r0, r1
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e00a      	b.n	8000b38 <__aeabi_l2f+0x14>
 8000b22:	bf00      	nop

08000b24 <__aeabi_l2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__aeabi_l2f+0x14>
 8000b32:	4240      	negs	r0, r0
 8000b34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b38:	ea5f 0c01 	movs.w	ip, r1
 8000b3c:	bf02      	ittt	eq
 8000b3e:	4684      	moveq	ip, r0
 8000b40:	4601      	moveq	r1, r0
 8000b42:	2000      	moveq	r0, #0
 8000b44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b48:	bf08      	it	eq
 8000b4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b52:	fabc f28c 	clz	r2, ip
 8000b56:	3a08      	subs	r2, #8
 8000b58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b5c:	db10      	blt.n	8000b80 <__aeabi_l2f+0x5c>
 8000b5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b62:	4463      	add	r3, ip
 8000b64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b70:	fa20 f202 	lsr.w	r2, r0, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f102 0220 	add.w	r2, r2, #32
 8000b84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b90:	fa21 f202 	lsr.w	r2, r1, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_fmul>:
 8000ba0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ba8:	bf1e      	ittt	ne
 8000baa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bae:	ea92 0f0c 	teqne	r2, ip
 8000bb2:	ea93 0f0c 	teqne	r3, ip
 8000bb6:	d06f      	beq.n	8000c98 <__aeabi_fmul+0xf8>
 8000bb8:	441a      	add	r2, r3
 8000bba:	ea80 0c01 	eor.w	ip, r0, r1
 8000bbe:	0240      	lsls	r0, r0, #9
 8000bc0:	bf18      	it	ne
 8000bc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bc6:	d01e      	beq.n	8000c06 <__aeabi_fmul+0x66>
 8000bc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bcc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd4:	fba0 3101 	umull	r3, r1, r0, r1
 8000bd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bdc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be0:	bf3e      	ittt	cc
 8000be2:	0049      	lslcc	r1, r1, #1
 8000be4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000be8:	005b      	lslcc	r3, r3, #1
 8000bea:	ea40 0001 	orr.w	r0, r0, r1
 8000bee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf2:	2afd      	cmp	r2, #253	; 0xfd
 8000bf4:	d81d      	bhi.n	8000c32 <__aeabi_fmul+0x92>
 8000bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	4770      	bx	lr
 8000c06:	f090 0f00 	teq	r0, #0
 8000c0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c0e:	bf08      	it	eq
 8000c10:	0249      	lsleq	r1, r1, #9
 8000c12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1a:	3a7f      	subs	r2, #127	; 0x7f
 8000c1c:	bfc2      	ittt	gt
 8000c1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c26:	4770      	bxgt	lr
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	3a01      	subs	r2, #1
 8000c32:	dc5d      	bgt.n	8000cf0 <__aeabi_fmul+0x150>
 8000c34:	f112 0f19 	cmn.w	r2, #25
 8000c38:	bfdc      	itt	le
 8000c3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bxle	lr
 8000c40:	f1c2 0200 	rsb	r2, r2, #0
 8000c44:	0041      	lsls	r1, r0, #1
 8000c46:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4a:	f1c2 0220 	rsb	r2, r2, #32
 8000c4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c52:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c56:	f140 0000 	adc.w	r0, r0, #0
 8000c5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c5e:	bf08      	it	eq
 8000c60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c64:	4770      	bx	lr
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c6e:	bf02      	ittt	eq
 8000c70:	0040      	lsleq	r0, r0, #1
 8000c72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c76:	3a01      	subeq	r2, #1
 8000c78:	d0f9      	beq.n	8000c6e <__aeabi_fmul+0xce>
 8000c7a:	ea40 000c 	orr.w	r0, r0, ip
 8000c7e:	f093 0f00 	teq	r3, #0
 8000c82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0049      	lsleq	r1, r1, #1
 8000c8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c8e:	3b01      	subeq	r3, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xe6>
 8000c92:	ea41 010c 	orr.w	r1, r1, ip
 8000c96:	e78f      	b.n	8000bb8 <__aeabi_fmul+0x18>
 8000c98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	bf18      	it	ne
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d00a      	beq.n	8000cbe <__aeabi_fmul+0x11e>
 8000ca8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cac:	bf18      	it	ne
 8000cae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb2:	d1d8      	bne.n	8000c66 <__aeabi_fmul+0xc6>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	4770      	bx	lr
 8000cbe:	f090 0f00 	teq	r0, #0
 8000cc2:	bf17      	itett	ne
 8000cc4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	f091 0f00 	teqne	r1, #0
 8000cce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd2:	d014      	beq.n	8000cfe <__aeabi_fmul+0x15e>
 8000cd4:	ea92 0f0c 	teq	r2, ip
 8000cd8:	d101      	bne.n	8000cde <__aeabi_fmul+0x13e>
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	d10f      	bne.n	8000cfe <__aeabi_fmul+0x15e>
 8000cde:	ea93 0f0c 	teq	r3, ip
 8000ce2:	d103      	bne.n	8000cec <__aeabi_fmul+0x14c>
 8000ce4:	024b      	lsls	r3, r1, #9
 8000ce6:	bf18      	it	ne
 8000ce8:	4608      	movne	r0, r1
 8000cea:	d108      	bne.n	8000cfe <__aeabi_fmul+0x15e>
 8000cec:	ea80 0001 	eor.w	r0, r0, r1
 8000cf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfc:	4770      	bx	lr
 8000cfe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fdiv>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d069      	beq.n	8000df4 <__aeabi_fdiv+0xec>
 8000d20:	eba2 0203 	sub.w	r2, r2, r3
 8000d24:	ea80 0c01 	eor.w	ip, r0, r1
 8000d28:	0249      	lsls	r1, r1, #9
 8000d2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d2e:	d037      	beq.n	8000da0 <__aeabi_fdiv+0x98>
 8000d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	428b      	cmp	r3, r1
 8000d42:	bf38      	it	cc
 8000d44:	005b      	lslcc	r3, r3, #1
 8000d46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	bf24      	itt	cs
 8000d52:	1a5b      	subcs	r3, r3, r1
 8000d54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d5c:	bf24      	itt	cs
 8000d5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6a:	bf24      	itt	cs
 8000d6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d78:	bf24      	itt	cs
 8000d7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8a:	d1e0      	bne.n	8000d4e <__aeabi_fdiv+0x46>
 8000d8c:	2afd      	cmp	r2, #253	; 0xfd
 8000d8e:	f63f af50 	bhi.w	8000c32 <__aeabi_fmul+0x92>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da8:	327f      	adds	r2, #127	; 0x7f
 8000daa:	bfc2      	ittt	gt
 8000dac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db4:	4770      	bxgt	lr
 8000db6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	e737      	b.n	8000c32 <__aeabi_fmul+0x92>
 8000dc2:	f092 0f00 	teq	r2, #0
 8000dc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0040      	lsleq	r0, r0, #1
 8000dce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd2:	3a01      	subeq	r2, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fdiv+0xc2>
 8000dd6:	ea40 000c 	orr.w	r0, r0, ip
 8000dda:	f093 0f00 	teq	r3, #0
 8000dde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0049      	lsleq	r1, r1, #1
 8000de6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dea:	3b01      	subeq	r3, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xda>
 8000dee:	ea41 010c 	orr.w	r1, r1, ip
 8000df2:	e795      	b.n	8000d20 <__aeabi_fdiv+0x18>
 8000df4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d108      	bne.n	8000e10 <__aeabi_fdiv+0x108>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	f47f af7d 	bne.w	8000cfe <__aeabi_fmul+0x15e>
 8000e04:	ea93 0f0c 	teq	r3, ip
 8000e08:	f47f af70 	bne.w	8000cec <__aeabi_fmul+0x14c>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e776      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e10:	ea93 0f0c 	teq	r3, ip
 8000e14:	d104      	bne.n	8000e20 <__aeabi_fdiv+0x118>
 8000e16:	024b      	lsls	r3, r1, #9
 8000e18:	f43f af4c 	beq.w	8000cb4 <__aeabi_fmul+0x114>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e76e      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1ca      	bne.n	8000dc2 <__aeabi_fdiv+0xba>
 8000e2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e30:	f47f af5c 	bne.w	8000cec <__aeabi_fmul+0x14c>
 8000e34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e38:	f47f af3c 	bne.w	8000cb4 <__aeabi_fmul+0x114>
 8000e3c:	e75f      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e3e:	bf00      	nop

08000e40 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected;
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000e48:	4a28      	ldr	r2, [pc, #160]	; (8000eec <MX_ADC1_Init+0xac>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000e60:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e72:	481d      	ldr	r0, [pc, #116]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000e74:	f000 fcb8 	bl	80017e8 <HAL_ADC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <MX_ADC1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e7e:	2144      	movs	r1, #68	; 0x44
 8000e80:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <MX_ADC1_Init+0xb0>)
 8000e82:	f000 fa5d 	bl	8001340 <_Error_Handler>
  }

    /**Configure Injected Channel 
    */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e86:	2303      	movs	r3, #3
 8000e88:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedOffset = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000eaa:	f001 f8c5 	bl	8002038 <HAL_ADCEx_InjectedConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <MX_ADC1_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000eb4:	2152      	movs	r1, #82	; 0x52
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <MX_ADC1_Init+0xb0>)
 8000eb8:	f000 fa42 	bl	8001340 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <MX_ADC1_Init+0xa8>)
 8000ece:	f000 ff25 	bl	8001d1c <HAL_ADC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <MX_ADC1_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ed8:	215c      	movs	r1, #92	; 0x5c
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_ADC1_Init+0xb0>)
 8000edc:	f000 fa30 	bl	8001340 <_Error_Handler>
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3730      	adds	r7, #48	; 0x30
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000028 	.word	0x20000028
 8000eec:	40012400 	.word	0x40012400
 8000ef0:	08004e5c 	.word	0x08004e5c

08000ef4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <HAL_ADC_MspInit+0x58>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d11d      	bne.n	8000f42 <HAL_ADC_MspInit+0x4e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <HAL_ADC_MspInit+0x5c>)
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_ADC_MspInit+0x5c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_ADC_MspInit+0x5c>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f22:	2303      	movs	r3, #3
 8000f24:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <HAL_ADC_MspInit+0x60>)
 8000f2e:	f001 fdcb 	bl	8002ac8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2012      	movs	r0, #18
 8000f38:	f001 fae5 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f3c:	2012      	movs	r0, #18
 8000f3e:	f001 fafe 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012400 	.word	0x40012400
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800

08000f58 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <MX_DMA_Init+0x48>)
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_DMA_Init+0x48>)
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_DMA_Init+0x48>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f001 fac3 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f80:	2010      	movs	r0, #16
 8000f82:	f001 fadc 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2011      	movs	r0, #17
 8000f8c:	f001 fabb 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f90:	2011      	movs	r0, #17
 8000f92:	f001 fad4 	bl	800253e <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fac:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	6193      	str	r3, [r2, #24]
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	f003 0320 	and.w	r3, r3, #32
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4a29      	ldr	r2, [pc, #164]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4a23      	ldr	r2, [pc, #140]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_GPIO_Init+0xc4>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOFT_SCL_Pin|SOFT_SDA_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000ff8:	481c      	ldr	r0, [pc, #112]	; (800106c <MX_GPIO_Init+0xc8>)
 8000ffa:	f001 febb 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <MX_GPIO_Init+0xcc>)
 8001006:	f001 feb5 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SOFT_SCL_Pin|SOFT_SDA_Pin;
 800100a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800100e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	4812      	ldr	r0, [pc, #72]	; (800106c <MX_GPIO_Init+0xc8>)
 8001024:	f001 fd50 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 8001028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2302      	movs	r3, #2
 8001038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <MX_GPIO_Init+0xcc>)
 8001042:	f001 fd41 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ADDRESS1_Pin|ADDRESS2_Pin;
 8001046:	2330      	movs	r3, #48	; 0x30
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4619      	mov	r1, r3
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_GPIO_Init+0xc8>)
 800105a:	f001 fd35 	bl	8002ac8 <HAL_GPIO_Init>

}
 800105e:	bf00      	nop
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	40010c00 	.word	0x40010c00
 8001070:	40010800 	.word	0x40010800

08001074 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_I2C1_Init+0x54>)
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <MX_I2C1_Init+0x58>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x54>)
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MX_I2C1_Init+0x5c>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_I2C1_Init+0x54>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 30;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C1_Init+0x54>)
 800108c:	221e      	movs	r2, #30
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_I2C1_Init+0x54>)
 8001092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_I2C1_Init+0x54>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_I2C1_Init+0x54>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_I2C1_Init+0x54>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_I2C1_Init+0x54>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_I2C1_Init+0x54>)
 80010b2:	f001 fe89 	bl	8002dc8 <HAL_I2C_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <MX_I2C1_Init+0x50>
  {
    _Error_Handler(__FILE__, __LINE__);
 80010bc:	2145      	movs	r1, #69	; 0x45
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_I2C1_Init+0x60>)
 80010c0:	f000 f93e 	bl	8001340 <_Error_Handler>
  }

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000009c 	.word	0x2000009c
 80010cc:	40005400 	.word	0x40005400
 80010d0:	000186a0 	.word	0x000186a0
 80010d4:	08004e70 	.word	0x08004e70

080010d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a3d      	ldr	r2, [pc, #244]	; (80011dc <HAL_I2C_MspInit+0x104>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d173      	bne.n	80011d2 <HAL_I2C_MspInit+0xfa>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ea:	23c0      	movs	r3, #192	; 0xc0
 80010ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4619      	mov	r1, r3
 8001100:	4837      	ldr	r0, [pc, #220]	; (80011e0 <HAL_I2C_MspInit+0x108>)
 8001102:	f001 fce1 	bl	8002ac8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001106:	4a37      	ldr	r2, [pc, #220]	; (80011e4 <HAL_I2C_MspInit+0x10c>)
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_I2C_MspInit+0x10c>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <HAL_I2C_MspInit+0x10c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 8001120:	4a32      	ldr	r2, [pc, #200]	; (80011ec <HAL_I2C_MspInit+0x114>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001124:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 800114a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800114e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001150:	4825      	ldr	r0, [pc, #148]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 8001152:	f001 fa37 	bl	80025c4 <HAL_DMA_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_I2C_MspInit+0x8c>
    {
      _Error_Handler(__FILE__, __LINE__);
 800115c:	216d      	movs	r1, #109	; 0x6d
 800115e:	4824      	ldr	r0, [pc, #144]	; (80011f0 <HAL_I2C_MspInit+0x118>)
 8001160:	f000 f8ee 	bl	8001340 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <HAL_I2C_MspInit+0x110>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <HAL_I2C_MspInit+0x120>)
 8001174:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 8001178:	2210      	movs	r2, #16
 800117a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 800119c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 80011a4:	f001 fa0e 	bl	80025c4 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_I2C_MspInit+0xde>
    {
      _Error_Handler(__FILE__, __LINE__);
 80011ae:	217d      	movs	r1, #125	; 0x7d
 80011b0:	480f      	ldr	r0, [pc, #60]	; (80011f0 <HAL_I2C_MspInit+0x118>)
 80011b2:	f000 f8c5 	bl	8001340 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <HAL_I2C_MspInit+0x11c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	201f      	movs	r0, #31
 80011c8:	f001 f99d 	bl	8002506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011cc:	201f      	movs	r0, #31
 80011ce:	f001 f9b6 	bl	800253e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	200000f0 	.word	0x200000f0
 80011ec:	40020080 	.word	0x40020080
 80011f0:	08004e70 	.word	0x08004e70
 80011f4:	20000058 	.word	0x20000058
 80011f8:	4002006c 	.word	0x4002006c

080011fc <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001202:	f000 fa8f 	bl	8001724 <HAL_Init>

  /* USER CODE BEGIN Init */
  adcData.first_time = 0;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <main+0x80>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120e:	f000 f83f 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f7ff fec7 	bl	8000fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001216:	f7ff fe9f 	bl	8000f58 <MX_DMA_Init>
  MX_ADC1_Init();
 800121a:	f7ff fe11 	bl	8000e40 <MX_ADC1_Init>
  MX_I2C1_Init();
 800121e:	f7ff ff29 	bl	8001074 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t prevTick = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]

  HAL_ADC_Start_IT(&hadc1);
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <main+0x84>)
 8001228:	f000 fbb6 	bl	8001998 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - prevTick >= LED_DELAY || HAL_GetTick() - prevTick > LED_DELAY*100) {
 800122c:	f000 fad2 	bl	80017d4 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800123a:	d207      	bcs.n	800124c <main+0x50>
 800123c:	f000 faca 	bl	80017d4 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <main+0x88>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d907      	bls.n	800125c <main+0x60>
		  HAL_GPIO_TogglePin(Debug_LED_GPIO_Port, Debug_LED_Pin);
 800124c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <main+0x8c>)
 8001252:	f001 fda7 	bl	8002da4 <HAL_GPIO_TogglePin>
		  prevTick = HAL_GetTick();
 8001256:	f000 fabd 	bl	80017d4 <HAL_GetTick>
 800125a:	6078      	str	r0, [r7, #4]
	  }

	  if(adcData.conversions == ADC_RESULTS_NUMBER+1) {
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <main+0x80>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b0b      	cmp	r3, #11
 8001262:	d1e3      	bne.n	800122c <main+0x30>
		  clearArrayUint32(adcData.results, ADC_RESULTS_NUMBER);
 8001264:	210a      	movs	r1, #10
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <main+0x90>)
 8001268:	f000 f9ca 	bl	8001600 <clearArrayUint32>
		  adcData.conversions = 0;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <main+0x80>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <main+0x84>)
 8001274:	f000 fb90 	bl	8001998 <HAL_ADC_Start_IT>
	  if(HAL_GetTick() - prevTick >= LED_DELAY || HAL_GetTick() - prevTick > LED_DELAY*100) {
 8001278:	e7d8      	b.n	800122c <main+0x30>
 800127a:	bf00      	nop
 800127c:	20000138 	.word	0x20000138
 8001280:	20000028 	.word	0x20000028
 8001284:	000186a0 	.word	0x000186a0
 8001288:	40010800 	.word	0x40010800
 800128c:	2000013c 	.word	0x2000013c

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001296:	2302      	movs	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129a:	2301      	movs	r3, #1
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800129e:	2310      	movs	r3, #16
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 f8fa 	bl	80044a4 <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <SystemClock_Config+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80012b6:	2195      	movs	r1, #149	; 0x95
 80012b8:	481f      	ldr	r0, [pc, #124]	; (8001338 <SystemClock_Config+0xa8>)
 80012ba:	f000 f841 	bl	8001340 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fb47 	bl	800496c <HAL_RCC_ClockConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <SystemClock_Config+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80012e4:	21a3      	movs	r1, #163	; 0xa3
 80012e6:	4814      	ldr	r0, [pc, #80]	; (8001338 <SystemClock_Config+0xa8>)
 80012e8:	f000 f82a 	bl	8001340 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ec:	2302      	movs	r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fcca 	bl	8004c90 <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001302:	21aa      	movs	r1, #170	; 0xaa
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <SystemClock_Config+0xa8>)
 8001306:	f000 f81b 	bl	8001340 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800130a:	f003 fc85 	bl	8004c18 <HAL_RCC_GetHCLKFreq>
 800130e:	4602      	mov	r2, r0
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <SystemClock_Config+0xac>)
 8001312:	fba3 2302 	umull	r2, r3, r3, r2
 8001316:	099b      	lsrs	r3, r3, #6
 8001318:	4618      	mov	r0, r3
 800131a:	f001 f91e 	bl	800255a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800131e:	2004      	movs	r0, #4
 8001320:	f001 f928 	bl	8002574 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132c:	f001 f8eb 	bl	8002506 <HAL_NVIC_SetPriority>
}
 8001330:	bf00      	nop
 8001332:	3750      	adds	r7, #80	; 0x50
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08004e84 	.word	0x08004e84
 800133c:	10624dd3 	.word	0x10624dd3

08001340 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800134a:	e7fe      	b.n	800134a <_Error_Handler+0xa>

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001352:	4a2b      	ldr	r2, [pc, #172]	; (8001400 <HAL_MspInit+0xb4>)
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_MspInit+0xb4>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_MspInit+0xb4>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_MspInit+0xb4>)
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_MspInit+0xb4>)
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_MspInit+0xb4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001382:	2003      	movs	r0, #3
 8001384:	f001 f8b4 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	f06f 000b 	mvn.w	r0, #11
 8001390:	f001 f8b9 	bl	8002506 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	f06f 000a 	mvn.w	r0, #10
 800139c:	f001 f8b3 	bl	8002506 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	f06f 0009 	mvn.w	r0, #9
 80013a8:	f001 f8ad 	bl	8002506 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	f06f 0004 	mvn.w	r0, #4
 80013b4:	f001 f8a7 	bl	8002506 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	f06f 0003 	mvn.w	r0, #3
 80013c0:	f001 f8a1 	bl	8002506 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	f06f 0001 	mvn.w	r0, #1
 80013cc:	f001 f89b 	bl	8002506 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d8:	f001 f895 	bl	8002506 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_MspInit+0xb8>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_MspInit+0xb8>)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	40010000 	.word	0x40010000

08001408 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <HardFault_Handler+0x4>

0800141a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <MemManage_Handler+0x4>

08001420 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <BusFault_Handler+0x4>

08001426 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <UsageFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001454:	f000 f9ac 	bl	80017b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001458:	f001 f8a8 	bl	80025ac <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <DMA1_Channel6_IRQHandler>:

/**
* @brief This function handles DMA1 channel6 global interrupt.
*/
void DMA1_Channel6_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Channel6_IRQHandler+0x10>)
 8001466:	f001 f9ef 	bl	8002848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000058 	.word	0x20000058

08001474 <DMA1_Channel7_IRQHandler>:

/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <DMA1_Channel7_IRQHandler+0x10>)
 800147a:	f001 f9e5 	bl	8002848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000f0 	.word	0x200000f0

08001488 <ADC1_2_IRQHandler>:

/**
* @brief This function handles ADC1 and ADC2 global interrupts.
*/
void ADC1_2_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <ADC1_2_IRQHandler+0x10>)
 800148e:	f000 fb79 	bl	8001b84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000028 	.word	0x20000028

0800149c <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event interrupt.
*/
void I2C1_EV_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <I2C1_EV_IRQHandler+0x10>)
 80014a2:	f001 fe59 	bl	8003158 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000009c 	.word	0x2000009c

080014b0 <HAL_ADC_ConvCpltCallback>:
#include "user.h"
#include "adc.h"
#include "i2c.h"

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef *hadc)
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc1);
 80014b8:	483f      	ldr	r0, [pc, #252]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x108>)
 80014ba:	f000 fb23 	bl	8001b04 <HAL_ADC_Stop_IT>
	adcData.results[adcData.conversions] = HAL_ADC_GetValue(&hadc1);
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461c      	mov	r4, r3
 80014c4:	483c      	ldr	r0, [pc, #240]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x108>)
 80014c6:	f000 fb51 	bl	8001b6c <HAL_ADC_GetValue>
 80014ca:	4601      	mov	r1, r0
 80014cc:	4a3b      	ldr	r2, [pc, #236]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 80014ce:	00a3      	lsls	r3, r4, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	6059      	str	r1, [r3, #4]
	adcData.conversions++;
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 80014de:	701a      	strb	r2, [r3, #0]

	if(adcData.conversions == ADC_RESULTS_NUMBER) {
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b0a      	cmp	r3, #10
 80014e6:	d15c      	bne.n	80015a2 <HAL_ADC_ConvCpltCallback+0xf2>
		float temp = 0;
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
		for(uint8_t i=0; i<ADC_RESULTS_NUMBER; i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	72fb      	strb	r3, [r7, #11]
 80014f2:	e032      	b.n	800155a <HAL_ADC_ConvCpltCallback+0xaa>
			temp = temp + ((float) (adcData.results[i]) / 4096 * 3.3);
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7fe ff8f 	bl	8000418 <__aeabi_f2d>
 80014fa:	4604      	mov	r4, r0
 80014fc:	460d      	mov	r5, r1
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	4a2e      	ldr	r2, [pc, #184]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff faf1 	bl	8000af0 <__aeabi_ui2f>
 800150e:	4603      	mov	r3, r0
 8001510:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fbf7 	bl	8000d08 <__aeabi_fdiv>
 800151a:	4603      	mov	r3, r0
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff7b 	bl	8000418 <__aeabi_f2d>
 8001522:	a323      	add	r3, pc, #140	; (adr r3, 80015b0 <HAL_ADC_ConvCpltCallback+0x100>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe ffca 	bl	80004c0 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fe12 	bl	800015c <__adddf3>
 8001538:	4603      	mov	r3, r0
 800153a:	460c      	mov	r4, r1
 800153c:	4618      	mov	r0, r3
 800153e:	4621      	mov	r1, r4
 8001540:	f7ff f9d0 	bl	80008e4 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	60fb      	str	r3, [r7, #12]
			adcData.results[i] = 0;
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
		for(uint8_t i=0; i<ADC_RESULTS_NUMBER; i++) {
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	3301      	adds	r3, #1
 8001558:	72fb      	strb	r3, [r7, #11]
 800155a:	7afb      	ldrb	r3, [r7, #11]
 800155c:	2b09      	cmp	r3, #9
 800155e:	d9c9      	bls.n	80014f4 <HAL_ADC_ConvCpltCallback+0x44>
		}
		adcData.average = temp / ADC_RESULTS_NUMBER;
 8001560:	4917      	ldr	r1, [pc, #92]	; (80015c0 <HAL_ADC_ConvCpltCallback+0x110>)
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fbd0 	bl	8000d08 <__aeabi_fdiv>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
		adcData.conversions++;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 800157a:	701a      	strb	r2, [r3, #0]

		if(!adcData.first_time) {
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 800157e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001582:	2b00      	cmp	r3, #0
 8001584:	d110      	bne.n	80015a8 <HAL_ADC_ConvCpltCallback+0xf8>
			Uint8FromFloat(&adcData.average, &dataToSend[0]);
 8001586:	490f      	ldr	r1, [pc, #60]	; (80015c4 <HAL_ADC_ConvCpltCallback+0x114>)
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <HAL_ADC_ConvCpltCallback+0x118>)
 800158a:	f000 f854 	bl	8001636 <Uint8FromFloat>
			HAL_I2C_Slave_Transmit_DMA(&hi2c1, &dataToSend[0], DATA_TO_SEND_SIZE);
 800158e:	2204      	movs	r2, #4
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <HAL_ADC_ConvCpltCallback+0x114>)
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <HAL_ADC_ConvCpltCallback+0x11c>)
 8001594:	f001 fd1c 	bl	8002fd0 <HAL_I2C_Slave_Transmit_DMA>
			adcData.first_time = 1;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_ADC_ConvCpltCallback+0x10c>)
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}
	else {
		HAL_ADC_Start_IT(&hadc1);
	}
}
 80015a0:	e002      	b.n	80015a8 <HAL_ADC_ConvCpltCallback+0xf8>
		HAL_ADC_Start_IT(&hadc1);
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x108>)
 80015a4:	f000 f9f8 	bl	8001998 <HAL_ADC_Start_IT>
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	66666666 	.word	0x66666666
 80015b4:	400a6666 	.word	0x400a6666
 80015b8:	20000028 	.word	0x20000028
 80015bc:	20000138 	.word	0x20000138
 80015c0:	41200000 	.word	0x41200000
 80015c4:	20000134 	.word	0x20000134
 80015c8:	20000164 	.word	0x20000164
 80015cc:	2000009c 	.word	0x2000009c

080015d0 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	Uint8FromFloat(&adcData.average, &dataToSend[0]);
 80015d8:	4906      	ldr	r1, [pc, #24]	; (80015f4 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 80015dc:	f000 f82b 	bl	8001636 <Uint8FromFloat>
	HAL_I2C_Slave_Transmit_DMA(&hi2c1, &dataToSend[0], DATA_TO_SEND_SIZE);
 80015e0:	2204      	movs	r2, #4
 80015e2:	4904      	ldr	r1, [pc, #16]	; (80015f4 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 80015e6:	f001 fcf3 	bl	8002fd0 <HAL_I2C_Slave_Transmit_DMA>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000134 	.word	0x20000134
 80015f8:	20000164 	.word	0x20000164
 80015fc:	2000009c 	.word	0x2000009c

08001600 <clearArrayUint32>:

void clearArrayUint32(uint32_t* target, uint16_t size)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<size; i++) {
 800160c:	2300      	movs	r3, #0
 800160e:	81fb      	strh	r3, [r7, #14]
 8001610:	e008      	b.n	8001624 <clearArrayUint32+0x24>
		target[i] = 0;
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0; i<size; i++) {
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	3301      	adds	r3, #1
 8001622:	81fb      	strh	r3, [r7, #14]
 8001624:	89fa      	ldrh	r2, [r7, #14]
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3f2      	bcc.n	8001612 <clearArrayUint32+0x12>
	}
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <Uint8FromFloat>:
		target[i] = 0;
	}
}

void Uint8FromFloat(float *input, uint8_t *outArray)
{
 8001636:	b480      	push	{r7}
 8001638:	b085      	sub	sp, #20
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
	uint8_t *d = (uint8_t *) &input;
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	60fb      	str	r3, [r7, #12]

	outArray[0] = *d & 0xFF;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	701a      	strb	r2, [r3, #0]
	outArray[1] = (*d >> 8) & 0xFF;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
	outArray[2] = (*d >> 16) & 0xFF;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	3302      	adds	r3, #2
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
	outArray[3] = (*d >> 24) & 0xFF;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3303      	adds	r3, #3
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
	...

08001670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001670:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001672:	e003      	b.n	800167c <LoopCopyDataInit>

08001674 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001676:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001678:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800167a:	3104      	adds	r1, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001680:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001684:	d3f6      	bcc.n	8001674 <CopyDataInit>
  ldr r2, =_sbss
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001688:	e002      	b.n	8001690 <LoopFillZerobss>

0800168a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800168c:	f842 3b04 	str.w	r3, [r2], #4

08001690 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001692:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001694:	d3f9      	bcc.n	800168a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001696:	f000 f811 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f003 fbaf 	bl	8004dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7ff fdad 	bl	80011fc <main>
  bx lr
 80016a2:	4770      	bx	lr
  ldr r3, =_sidata
 80016a4:	08004ecc 	.word	0x08004ecc
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80016b0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80016b4:	20000170 	.word	0x20000170

080016b8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <CAN1_RX1_IRQHandler>
	...

080016bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016c0:	4a15      	ldr	r2, [pc, #84]	; (8001718 <SystemInit+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <SystemInit+0x5c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016cc:	4912      	ldr	r1, [pc, #72]	; (8001718 <SystemInit+0x5c>)
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <SystemInit+0x5c>)
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <SystemInit+0x60>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <SystemInit+0x5c>)
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <SystemInit+0x5c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <SystemInit+0x5c>)
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <SystemInit+0x5c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016f4:	4a08      	ldr	r2, [pc, #32]	; (8001718 <SystemInit+0x5c>)
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <SystemInit+0x5c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SystemInit+0x5c>)
 8001702:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001706:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SystemInit+0x64>)
 800170a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800170e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	f8ff0000 	.word	0xf8ff0000
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_Init+0x28>)
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x28>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 fedb 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fe04 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fef3 	bl	800255a <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800178c:	f000 febb 	bl	8002506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <HAL_IncTick+0x20>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000008 	.word	0x20000008
 80017d0:	2000016c 	.word	0x2000016c

080017d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	2000016c 	.word	0x2000016c

080017e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0be      	b.n	8001988 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fb64 	bl	8000ef4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 fbbf 	bl	8001fb0 <ADC_ConversionStop_Disable>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 8099 	bne.w	8001976 <HAL_ADC_Init+0x18e>
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 8095 	bne.w	8001976 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001854:	f023 0302 	bic.w	r3, r3, #2
 8001858:	f043 0202 	orr.w	r2, r3, #2
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001868:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001870:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	4313      	orrs	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001880:	d003      	beq.n	800188a <HAL_ADC_Init+0xa2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d102      	bne.n	8001890 <HAL_ADC_Init+0xa8>
 800188a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188e:	e000      	b.n	8001892 <HAL_ADC_Init+0xaa>
 8001890:	2300      	movs	r3, #0
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d119      	bne.n	80018d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	035a      	lsls	r2, r3, #13
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e00b      	b.n	80018d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f043 0220 	orr.w	r2, r3, #32
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	6852      	ldr	r2, [r2, #4]
 80018de:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6899      	ldr	r1, [r3, #8]
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_ADC_Init+0x1a8>)
 80018f4:	400b      	ands	r3, r1
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001904:	d003      	beq.n	800190e <HAL_ADC_Init+0x126>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d104      	bne.n	8001918 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	3b01      	subs	r3, #1
 8001914:	051b      	lsls	r3, r3, #20
 8001916:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001922:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	430a      	orrs	r2, r1
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_ADC_Init+0x1ac>)
 8001934:	4013      	ands	r3, r2
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4293      	cmp	r3, r2
 800193a:	d10b      	bne.n	8001954 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	f023 0303 	bic.w	r3, r3, #3
 800194a:	f043 0201 	orr.w	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001952:	e018      	b.n	8001986 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f023 0312 	bic.w	r3, r3, #18
 800195c:	f043 0210 	orr.w	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001974:	e007      	b.n	8001986 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	f043 0210 	orr.w	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	ffe1f7fd 	.word	0xffe1f7fd
 8001994:	ff1f0efe 	.word	0xff1f0efe

08001998 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Start_IT+0x1a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e0a0      	b.n	8001af4 <HAL_ADC_Start_IT+0x15c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 faa6 	bl	8001f0c <ADC_Enable>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 808f 	bne.w	8001aea <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a45      	ldr	r2, [pc, #276]	; (8001afc <HAL_ADC_Start_IT+0x164>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d105      	bne.n	80019f6 <HAL_ADC_Start_IT+0x5e>
 80019ea:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <HAL_ADC_Start_IT+0x168>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d026      	beq.n	8001a5e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a20:	e01d      	b.n	8001a5e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a33      	ldr	r2, [pc, #204]	; (8001b00 <HAL_ADC_Start_IT+0x168>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d004      	beq.n	8001a42 <HAL_ADC_Start_IT+0xaa>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2f      	ldr	r2, [pc, #188]	; (8001afc <HAL_ADC_Start_IT+0x164>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10d      	bne.n	8001a5e <HAL_ADC_Start_IT+0xc6>
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_ADC_Start_IT+0x168>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f023 0206 	bic.w	r2, r3, #6
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a76:	e002      	b.n	8001a7e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0202 	mvn.w	r2, #2
 8001a8e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	6852      	ldr	r2, [r2, #4]
 8001a9a:	f042 0220 	orr.w	r2, r2, #32
 8001a9e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001aaa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aae:	d113      	bne.n	8001ad8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ab4:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_ADC_Start_IT+0x164>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d105      	bne.n	8001ac6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_ADC_Start_IT+0x168>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	6892      	ldr	r2, [r2, #8]
 8001ad0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	e00c      	b.n	8001af2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	6892      	ldr	r2, [r2, #8]
 8001ae2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	e003      	b.n	8001af2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40012800 	.word	0x40012800
 8001b00:	40012400 	.word	0x40012400

08001b04 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Stop_IT+0x1a>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e022      	b.n	8001b64 <HAL_ADC_Stop_IT+0x60>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fa42 	bl	8001fb0 <ADC_ConversionStop_Disable>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d111      	bne.n	8001b5a <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	6852      	ldr	r2, [r2, #4]
 8001b40:	f022 0220 	bic.w	r2, r2, #32
 8001b44:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	f043 0201 	orr.w	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	d140      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d139      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bce:	d11d      	bne.n	8001c0c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d119      	bne.n	8001c0c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	6852      	ldr	r2, [r2, #4]
 8001be2:	f022 0220 	bic.w	r2, r2, #32
 8001be6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fc4f 	bl	80014b0 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f06f 0212 	mvn.w	r2, #18
 8001c1a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	2b80      	cmp	r3, #128	; 0x80
 8001c28:	d14f      	bne.n	8001cca <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d148      	bne.n	8001cca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c5a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001c5e:	d012      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d125      	bne.n	8001cba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c7c:	d11d      	bne.n	8001cba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d119      	bne.n	8001cba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	6852      	ldr	r2, [r2, #4]
 8001c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c94:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9b2 	bl	8002024 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 020c 	mvn.w	r2, #12
 8001cc8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d114      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10d      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f809 	bl	8001d0a <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0201 	mvn.w	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d1c:	b490      	push	{r4, r7}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x20>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e0dc      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x1da>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d81c      	bhi.n	8001d86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b05      	subs	r3, #5
 8001d62:	221f      	movs	r2, #31
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4018      	ands	r0, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681c      	ldr	r4, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b05      	subs	r3, #5
 8001d7c:	fa04 f303 	lsl.w	r3, r4, r3
 8001d80:	4303      	orrs	r3, r0
 8001d82:	634b      	str	r3, [r1, #52]	; 0x34
 8001d84:	e03c      	b.n	8001e00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d81c      	bhi.n	8001dc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	3b23      	subs	r3, #35	; 0x23
 8001da4:	221f      	movs	r2, #31
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	4018      	ands	r0, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681c      	ldr	r4, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b23      	subs	r3, #35	; 0x23
 8001dbe:	fa04 f303 	lsl.w	r3, r4, r3
 8001dc2:	4303      	orrs	r3, r0
 8001dc4:	630b      	str	r3, [r1, #48]	; 0x30
 8001dc6:	e01b      	b.n	8001e00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b41      	subs	r3, #65	; 0x41
 8001dde:	221f      	movs	r2, #31
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4018      	ands	r0, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681c      	ldr	r4, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b41      	subs	r3, #65	; 0x41
 8001df8:	fa04 f303 	lsl.w	r3, r4, r3
 8001dfc:	4303      	orrs	r3, r0
 8001dfe:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	d91c      	bls.n	8001e42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68d8      	ldr	r0, [r3, #12]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b1e      	subs	r3, #30
 8001e1e:	2207      	movs	r2, #7
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4018      	ands	r0, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689c      	ldr	r4, [r3, #8]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	3b1e      	subs	r3, #30
 8001e38:	fa04 f303 	lsl.w	r3, r4, r3
 8001e3c:	4303      	orrs	r3, r0
 8001e3e:	60cb      	str	r3, [r1, #12]
 8001e40:	e019      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6918      	ldr	r0, [r3, #16]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	2207      	movs	r2, #7
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4018      	ands	r0, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689c      	ldr	r4, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	fa04 f303 	lsl.w	r3, r4, r3
 8001e72:	4303      	orrs	r3, r0
 8001e74:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d003      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e82:	2b11      	cmp	r3, #17
 8001e84:	d132      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d125      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d126      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	6892      	ldr	r2, [r2, #8]
 8001ea8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001eac:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d11a      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_ADC_ConfigChannel+0x1e8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	0c9a      	lsrs	r2, r3, #18
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ecc:	e002      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f9      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x1b2>
 8001eda:	e007      	b.n	8001eec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc90      	pop	{r4, r7}
 8001efe:	4770      	bx	lr
 8001f00:	40012400 	.word	0x40012400
 8001f04:	20000000 	.word	0x20000000
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d039      	beq.n	8001f9e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	6892      	ldr	r2, [r2, #8]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <ADC_Enable+0x9c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <ADC_Enable+0xa0>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	0c9b      	lsrs	r3, r3, #18
 8001f46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f48:	e002      	b.n	8001f50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f9      	bne.n	8001f4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f56:	f7ff fc3d 	bl	80017d4 <HAL_GetTick>
 8001f5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f5c:	e018      	b.n	8001f90 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f5e:	f7ff fc39 	bl	80017d4 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d911      	bls.n	8001f90 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f043 0210 	orr.w	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e007      	b.n	8001fa0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d1df      	bne.n	8001f5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	431bde83 	.word	0x431bde83

08001fb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d127      	bne.n	800201a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	6892      	ldr	r2, [r2, #8]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fda:	f7ff fbfb 	bl	80017d4 <HAL_GetTick>
 8001fde:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fe0:	e014      	b.n	800200c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fe2:	f7ff fbf7 	bl	80017d4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d90d      	bls.n	800200c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e007      	b.n	800201c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d0e3      	beq.n	8001fe2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002038:	b4b0      	push	{r4, r5, r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8002054:	2302      	movs	r3, #2
 8002056:	e179      	b.n	800234c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d119      	bne.n	800209c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d10c      	bne.n	800208a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	0d9b      	lsrs	r3, r3, #22
 800207c:	059b      	lsls	r3, r3, #22
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	6809      	ldr	r1, [r1, #0]
 8002082:	03c9      	lsls	r1, r1, #15
 8002084:	430b      	orrs	r3, r1
 8002086:	6393      	str	r3, [r2, #56]	; 0x38
 8002088:	e04e      	b.n	8002128 <HAL_ADCEx_InjectedConfigChannel+0xf0>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	e045      	b.n	8002128 <HAL_ADCEx_InjectedConfigChannel+0xf0>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d829      	bhi.n	80020fc <HAL_ADCEx_InjectedConfigChannel+0xc4>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6819      	ldr	r1, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	330f      	adds	r3, #15
 80020c4:	221f      	movs	r2, #31
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4018      	ands	r0, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	051c      	lsls	r4, r3, #20
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681d      	ldr	r5, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	1ad2      	subs	r2, r2, r3
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	330f      	adds	r3, #15
 80020f0:	fa05 f303 	lsl.w	r3, r5, r3
 80020f4:	4323      	orrs	r3, r4
 80020f6:	4303      	orrs	r3, r0
 80020f8:	638b      	str	r3, [r1, #56]	; 0x38
 80020fa:	e015      	b.n	8002128 <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	1ad2      	subs	r2, r2, r3
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	330f      	adds	r3, #15
 8002118:	221f      	movs	r2, #31
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002122:	43db      	mvns	r3, r3
 8002124:	4003      	ands	r3, r0
 8002126:	638b      	str	r3, [r1, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00c      	beq.n	8002150 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	69c9      	ldr	r1, [r1, #28]
 800214c:	430b      	orrs	r3, r1
 800214e:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d115      	bne.n	8002184 <HAL_ADCEx_InjectedConfigChannel+0x14c>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002160:	d108      	bne.n	8002174 <HAL_ADCEx_InjectedConfigChannel+0x13c>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	6852      	ldr	r2, [r2, #4]
 800216c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	e007      	b.n	8002184 <HAL_ADCEx_InjectedConfigChannel+0x14c>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f043 0220 	orr.w	r2, r3, #32
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d114      	bne.n	80021b6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	6852      	ldr	r2, [r2, #4]
 800219e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	e007      	b.n	80021b6 <HAL_ADCEx_InjectedConfigChannel+0x17e>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f043 0220 	orr.w	r2, r3, #32
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b09      	cmp	r3, #9
 80021bc:	d91c      	bls.n	80021f8 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68d8      	ldr	r0, [r3, #12]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	3b1e      	subs	r3, #30
 80021d4:	2207      	movs	r2, #7
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	4018      	ands	r0, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689c      	ldr	r4, [r3, #8]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	3b1e      	subs	r3, #30
 80021ee:	fa04 f303 	lsl.w	r3, r4, r3
 80021f2:	4303      	orrs	r3, r0
 80021f4:	60cb      	str	r3, [r1, #12]
 80021f6:	e019      	b.n	800222c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6918      	ldr	r0, [r3, #16]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	2207      	movs	r2, #7
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	4018      	ands	r0, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689c      	ldr	r4, [r3, #8]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	fa04 f303 	lsl.w	r3, r4, r3
 8002228:	4303      	orrs	r3, r0
 800222a:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b10      	cmp	r3, #16
 8002232:	d003      	beq.n	800223c <HAL_ADCEx_InjectedConfigChannel+0x204>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002238:	2b11      	cmp	r3, #17
 800223a:	d107      	bne.n	800224c <HAL_ADCEx_InjectedConfigChannel+0x214>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	6892      	ldr	r2, [r2, #8]
 8002246:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800224a:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d011      	beq.n	8002278 <HAL_ADCEx_InjectedConfigChannel+0x240>
 8002254:	2b03      	cmp	r3, #3
 8002256:	d01d      	beq.n	8002294 <HAL_ADCEx_InjectedConfigChannel+0x25c>
 8002258:	2b01      	cmp	r3, #1
 800225a:	d129      	bne.n	80022b0 <HAL_ADCEx_InjectedConfigChannel+0x278>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800226a:	f023 030f 	bic.w	r3, r3, #15
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	68c9      	ldr	r1, [r1, #12]
 8002272:	430b      	orrs	r3, r1
 8002274:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8002276:	e029      	b.n	80022cc <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002286:	f023 030f 	bic.w	r3, r3, #15
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	68c9      	ldr	r1, [r1, #12]
 800228e:	430b      	orrs	r3, r1
 8002290:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8002292:	e01b      	b.n	80022cc <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022a2:	f023 030f 	bic.w	r3, r3, #15
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	68c9      	ldr	r1, [r1, #12]
 80022aa:	430b      	orrs	r3, r1
 80022ac:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80022ae:	e00d      	b.n	80022cc <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022be:	f023 030f 	bic.w	r3, r3, #15
 80022c2:	6839      	ldr	r1, [r7, #0]
 80022c4:	68c9      	ldr	r1, [r1, #12]
 80022c6:	430b      	orrs	r3, r1
 80022c8:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80022ca:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d003      	beq.n	80022dc <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80022d8:	2b11      	cmp	r3, #17
 80022da:	d132      	bne.n	8002342 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d125      	bne.n	8002332 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d126      	bne.n	8002342 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	6892      	ldr	r2, [r2, #8]
 80022fe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002302:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b10      	cmp	r3, #16
 800230a:	d11a      	bne.n	8002342 <HAL_ADCEx_InjectedConfigChannel+0x30a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9a      	lsrs	r2, r3, #18
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002322:	e002      	b.n	800232a <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          {
            wait_loop_index--;
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	3b01      	subs	r3, #1
 8002328:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f9      	bne.n	8002324 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
 8002330:	e007      	b.n	8002342 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bcb0      	pop	{r4, r5, r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40012400 	.word	0x40012400
 800235c:	20000000 	.word	0x20000000
 8002360:	431bde83 	.word	0x431bde83

08002364 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023d2:	4908      	ldr	r1, [pc, #32]	; (80023f4 <NVIC_EnableIRQ+0x2c>)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	79fa      	ldrb	r2, [r7, #7]
 80023dc:	f002 021f 	and.w	r2, r2, #31
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da0b      	bge.n	8002424 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	490d      	ldr	r1, [pc, #52]	; (8002444 <NVIC_SetPriority+0x4c>)
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	3b04      	subs	r3, #4
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002422:	e009      	b.n	8002438 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	4908      	ldr	r1, [pc, #32]	; (8002448 <NVIC_SetPriority+0x50>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00
 8002448:	e000e100 	.word	0xe000e100

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	2201      	movs	r2, #1
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	1e5a      	subs	r2, r3, #1
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	401a      	ands	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002492:	2101      	movs	r1, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	1e59      	subs	r1, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	; 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024d0:	f7ff ff92 	bl	80023f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff33 	bl	8002364 <NVIC_SetPriorityGrouping>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002518:	f7ff ff48 	bl	80023ac <NVIC_GetPriorityGrouping>
 800251c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7ff ff92 	bl	800244c <NVIC_EncodePriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff61 	bl	80023f8 <NVIC_SetPriority>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff3b 	bl	80023c8 <NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffa2 	bl	80024ac <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b04      	cmp	r3, #4
 8002580:	d106      	bne.n	8002590 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002582:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800258e:	e005      	b.n	800259c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002590:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80025b0:	f000 f802 	bl	80025b8 <HAL_SYSTICK_Callback>
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e04f      	b.n	800267a <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_DMA_Init+0xc0>)
 80025e2:	4413      	add	r3, r2
 80025e4:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_DMA_Init+0xc4>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	009a      	lsls	r2, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a25      	ldr	r2, [pc, #148]	; (800268c <HAL_DMA_Init+0xc8>)
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800260e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002612:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800261c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	bffdfff8 	.word	0xbffdfff8
 8002688:	cccccccd 	.word	0xcccccccd
 800268c:	40020000 	.word	0x40020000

08002690 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_DMA_Start_IT+0x20>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e04a      	b.n	8002746 <HAL_DMA_Start_IT+0xb6>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d13a      	bne.n	8002738 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f9c0 	bl	8002a6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	f042 020e 	orr.w	r2, r2, #14
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e00f      	b.n	8002726 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	f022 0204 	bic.w	r2, r2, #4
 8002714:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	f042 020a 	orr.w	r2, r2, #10
 8002724:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e005      	b.n	8002744 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002740:	2302      	movs	r3, #2
 8002742:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002744:	7dfb      	ldrb	r3, [r7, #23]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002762:	2b02      	cmp	r3, #2
 8002764:	d005      	beq.n	8002772 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2204      	movs	r2, #4
 800276a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e057      	b.n	8002822 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	f022 020e 	bic.w	r2, r2, #14
 8002780:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002792:	4a26      	ldr	r2, [pc, #152]	; (800282c <HAL_DMA_Abort_IT+0xdc>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_DMA_Abort_IT+0xe0>)
 800279c:	4299      	cmp	r1, r3
 800279e:	d02e      	beq.n	80027fe <HAL_DMA_Abort_IT+0xae>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_DMA_Abort_IT+0xe4>)
 80027a8:	4299      	cmp	r1, r3
 80027aa:	d026      	beq.n	80027fa <HAL_DMA_Abort_IT+0xaa>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_DMA_Abort_IT+0xe8>)
 80027b4:	4299      	cmp	r1, r3
 80027b6:	d01d      	beq.n	80027f4 <HAL_DMA_Abort_IT+0xa4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <HAL_DMA_Abort_IT+0xec>)
 80027c0:	4299      	cmp	r1, r3
 80027c2:	d014      	beq.n	80027ee <HAL_DMA_Abort_IT+0x9e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_DMA_Abort_IT+0xf0>)
 80027cc:	4299      	cmp	r1, r3
 80027ce:	d00b      	beq.n	80027e8 <HAL_DMA_Abort_IT+0x98>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_DMA_Abort_IT+0xf4>)
 80027d8:	4299      	cmp	r1, r3
 80027da:	d102      	bne.n	80027e2 <HAL_DMA_Abort_IT+0x92>
 80027dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027e0:	e00e      	b.n	8002800 <HAL_DMA_Abort_IT+0xb0>
 80027e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e6:	e00b      	b.n	8002800 <HAL_DMA_Abort_IT+0xb0>
 80027e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ec:	e008      	b.n	8002800 <HAL_DMA_Abort_IT+0xb0>
 80027ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f2:	e005      	b.n	8002800 <HAL_DMA_Abort_IT+0xb0>
 80027f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f8:	e002      	b.n	8002800 <HAL_DMA_Abort_IT+0xb0>
 80027fa:	2310      	movs	r3, #16
 80027fc:	e000      	b.n	8002800 <HAL_DMA_Abort_IT+0xb0>
 80027fe:	2301      	movs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
    } 
  }
  return status;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40020000 	.word	0x40020000
 8002830:	40020008 	.word	0x40020008
 8002834:	4002001c 	.word	0x4002001c
 8002838:	40020030 	.word	0x40020030
 800283c:	40020044 	.word	0x40020044
 8002840:	40020058 	.word	0x40020058
 8002844:	4002006c 	.word	0x4002006c

08002848 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2204      	movs	r2, #4
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d055      	beq.n	800291c <HAL_DMA_IRQHandler+0xd4>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d050      	beq.n	800291c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	f022 0204 	bic.w	r2, r2, #4
 8002896:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002898:	4a6d      	ldr	r2, [pc, #436]	; (8002a50 <HAL_DMA_IRQHandler+0x208>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4619      	mov	r1, r3
 80028a0:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <HAL_DMA_IRQHandler+0x20c>)
 80028a2:	4299      	cmp	r1, r3
 80028a4:	d02e      	beq.n	8002904 <HAL_DMA_IRQHandler+0xbc>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4619      	mov	r1, r3
 80028ac:	4b6a      	ldr	r3, [pc, #424]	; (8002a58 <HAL_DMA_IRQHandler+0x210>)
 80028ae:	4299      	cmp	r1, r3
 80028b0:	d026      	beq.n	8002900 <HAL_DMA_IRQHandler+0xb8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <HAL_DMA_IRQHandler+0x214>)
 80028ba:	4299      	cmp	r1, r3
 80028bc:	d01d      	beq.n	80028fa <HAL_DMA_IRQHandler+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4b66      	ldr	r3, [pc, #408]	; (8002a60 <HAL_DMA_IRQHandler+0x218>)
 80028c6:	4299      	cmp	r1, r3
 80028c8:	d014      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xac>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4b64      	ldr	r3, [pc, #400]	; (8002a64 <HAL_DMA_IRQHandler+0x21c>)
 80028d2:	4299      	cmp	r1, r3
 80028d4:	d00b      	beq.n	80028ee <HAL_DMA_IRQHandler+0xa6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <HAL_DMA_IRQHandler+0x220>)
 80028de:	4299      	cmp	r1, r3
 80028e0:	d102      	bne.n	80028e8 <HAL_DMA_IRQHandler+0xa0>
 80028e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028e6:	e00e      	b.n	8002906 <HAL_DMA_IRQHandler+0xbe>
 80028e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028ec:	e00b      	b.n	8002906 <HAL_DMA_IRQHandler+0xbe>
 80028ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028f2:	e008      	b.n	8002906 <HAL_DMA_IRQHandler+0xbe>
 80028f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028f8:	e005      	b.n	8002906 <HAL_DMA_IRQHandler+0xbe>
 80028fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028fe:	e002      	b.n	8002906 <HAL_DMA_IRQHandler+0xbe>
 8002900:	2340      	movs	r3, #64	; 0x40
 8002902:	e000      	b.n	8002906 <HAL_DMA_IRQHandler+0xbe>
 8002904:	2304      	movs	r3, #4
 8002906:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 809a 	beq.w	8002a46 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800291a:	e094      	b.n	8002a46 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	2202      	movs	r2, #2
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05c      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x19e>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d057      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	f022 020a 	bic.w	r2, r2, #10
 8002952:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800295c:	4a3c      	ldr	r2, [pc, #240]	; (8002a50 <HAL_DMA_IRQHandler+0x208>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_DMA_IRQHandler+0x20c>)
 8002966:	4299      	cmp	r1, r3
 8002968:	d02e      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x180>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_DMA_IRQHandler+0x210>)
 8002972:	4299      	cmp	r1, r3
 8002974:	d026      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x17c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_DMA_IRQHandler+0x214>)
 800297e:	4299      	cmp	r1, r3
 8002980:	d01d      	beq.n	80029be <HAL_DMA_IRQHandler+0x176>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4b35      	ldr	r3, [pc, #212]	; (8002a60 <HAL_DMA_IRQHandler+0x218>)
 800298a:	4299      	cmp	r1, r3
 800298c:	d014      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x170>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <HAL_DMA_IRQHandler+0x21c>)
 8002996:	4299      	cmp	r1, r3
 8002998:	d00b      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x16a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_DMA_IRQHandler+0x220>)
 80029a2:	4299      	cmp	r1, r3
 80029a4:	d102      	bne.n	80029ac <HAL_DMA_IRQHandler+0x164>
 80029a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029aa:	e00e      	b.n	80029ca <HAL_DMA_IRQHandler+0x182>
 80029ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b0:	e00b      	b.n	80029ca <HAL_DMA_IRQHandler+0x182>
 80029b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b6:	e008      	b.n	80029ca <HAL_DMA_IRQHandler+0x182>
 80029b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029bc:	e005      	b.n	80029ca <HAL_DMA_IRQHandler+0x182>
 80029be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c2:	e002      	b.n	80029ca <HAL_DMA_IRQHandler+0x182>
 80029c4:	2320      	movs	r3, #32
 80029c6:	e000      	b.n	80029ca <HAL_DMA_IRQHandler+0x182>
 80029c8:	2302      	movs	r3, #2
 80029ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d034      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029e4:	e02f      	b.n	8002a46 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2208      	movs	r2, #8
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d028      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x200>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d023      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	f022 020e 	bic.w	r2, r2, #14
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
    }
  }
  return;
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
}
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020008 	.word	0x40020008
 8002a58:	4002001c 	.word	0x4002001c
 8002a5c:	40020030 	.word	0x40020030
 8002a60:	40020044 	.word	0x40020044
 8002a64:	40020058 	.word	0x40020058
 8002a68:	4002006c 	.word	0x4002006c

08002a6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a82:	2101      	movs	r1, #1
 8002a84:	fa01 f202 	lsl.w	r2, r1, r2
 8002a88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d108      	bne.n	8002aac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002aaa:	e007      	b.n	8002abc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b08b      	sub	sp, #44	; 0x2c
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	e121      	b.n	8002d30 <HAL_GPIO_Init+0x268>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8002aec:	2201      	movs	r2, #1
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8110 	bne.w	8002d2a <HAL_GPIO_Init+0x262>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b12      	cmp	r3, #18
 8002b10:	d034      	beq.n	8002b7c <HAL_GPIO_Init+0xb4>
 8002b12:	2b12      	cmp	r3, #18
 8002b14:	d80d      	bhi.n	8002b32 <HAL_GPIO_Init+0x6a>
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d02b      	beq.n	8002b72 <HAL_GPIO_Init+0xaa>
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d804      	bhi.n	8002b28 <HAL_GPIO_Init+0x60>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d031      	beq.n	8002b86 <HAL_GPIO_Init+0xbe>
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d01c      	beq.n	8002b60 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b26:	e048      	b.n	8002bba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d043      	beq.n	8002bb4 <HAL_GPIO_Init+0xec>
 8002b2c:	2b11      	cmp	r3, #17
 8002b2e:	d01b      	beq.n	8002b68 <HAL_GPIO_Init+0xa0>
          break;
 8002b30:	e043      	b.n	8002bba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002b32:	4a84      	ldr	r2, [pc, #528]	; (8002d44 <HAL_GPIO_Init+0x27c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d026      	beq.n	8002b86 <HAL_GPIO_Init+0xbe>
 8002b38:	4a82      	ldr	r2, [pc, #520]	; (8002d44 <HAL_GPIO_Init+0x27c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d806      	bhi.n	8002b4c <HAL_GPIO_Init+0x84>
 8002b3e:	4a82      	ldr	r2, [pc, #520]	; (8002d48 <HAL_GPIO_Init+0x280>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d020      	beq.n	8002b86 <HAL_GPIO_Init+0xbe>
 8002b44:	4a81      	ldr	r2, [pc, #516]	; (8002d4c <HAL_GPIO_Init+0x284>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_GPIO_Init+0xbe>
          break;
 8002b4a:	e036      	b.n	8002bba <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002b4c:	4a80      	ldr	r2, [pc, #512]	; (8002d50 <HAL_GPIO_Init+0x288>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d019      	beq.n	8002b86 <HAL_GPIO_Init+0xbe>
 8002b52:	4a80      	ldr	r2, [pc, #512]	; (8002d54 <HAL_GPIO_Init+0x28c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d016      	beq.n	8002b86 <HAL_GPIO_Init+0xbe>
 8002b58:	4a7f      	ldr	r2, [pc, #508]	; (8002d58 <HAL_GPIO_Init+0x290>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_GPIO_Init+0xbe>
          break;
 8002b5e:	e02c      	b.n	8002bba <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	623b      	str	r3, [r7, #32]
          break;
 8002b66:	e028      	b.n	8002bba <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	623b      	str	r3, [r7, #32]
          break;
 8002b70:	e023      	b.n	8002bba <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	3308      	adds	r3, #8
 8002b78:	623b      	str	r3, [r7, #32]
          break;
 8002b7a:	e01e      	b.n	8002bba <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	330c      	adds	r3, #12
 8002b82:	623b      	str	r3, [r7, #32]
          break;
 8002b84:	e019      	b.n	8002bba <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b8e:	2304      	movs	r3, #4
 8002b90:	623b      	str	r3, [r7, #32]
          break;
 8002b92:	e012      	b.n	8002bba <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	611a      	str	r2, [r3, #16]
          break;
 8002ba6:	e008      	b.n	8002bba <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	615a      	str	r2, [r3, #20]
          break;
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
          break;
 8002bb8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2bff      	cmp	r3, #255	; 0xff
 8002bbe:	d801      	bhi.n	8002bc4 <HAL_GPIO_Init+0xfc>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	e001      	b.n	8002bc8 <HAL_GPIO_Init+0x100>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2bff      	cmp	r3, #255	; 0xff
 8002bce:	d802      	bhi.n	8002bd6 <HAL_GPIO_Init+0x10e>
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	e002      	b.n	8002bdc <HAL_GPIO_Init+0x114>
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	3b08      	subs	r3, #8
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	210f      	movs	r1, #15
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	401a      	ands	r2, r3
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8090 	beq.w	8002d2a <HAL_GPIO_Init+0x262>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c0a:	4a54      	ldr	r2, [pc, #336]	; (8002d5c <HAL_GPIO_Init+0x294>)
 8002c0c:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_GPIO_Init+0x294>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6193      	str	r3, [r2, #24]
 8002c16:	4b51      	ldr	r3, [pc, #324]	; (8002d5c <HAL_GPIO_Init+0x294>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8002c22:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x298>)
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4013      	ands	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a46      	ldr	r2, [pc, #280]	; (8002d64 <HAL_GPIO_Init+0x29c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x1a2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a45      	ldr	r2, [pc, #276]	; (8002d68 <HAL_GPIO_Init+0x2a0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x19e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a44      	ldr	r2, [pc, #272]	; (8002d6c <HAL_GPIO_Init+0x2a4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x19a>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e004      	b.n	8002c6c <HAL_GPIO_Init+0x1a4>
 8002c62:	2303      	movs	r3, #3
 8002c64:	e002      	b.n	8002c6c <HAL_GPIO_Init+0x1a4>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_GPIO_Init+0x1a4>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6e:	f002 0203 	and.w	r2, r2, #3
 8002c72:	0092      	lsls	r2, r2, #2
 8002c74:	4093      	lsls	r3, r2
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002c7c:	4938      	ldr	r1, [pc, #224]	; (8002d60 <HAL_GPIO_Init+0x298>)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c96:	4936      	ldr	r1, [pc, #216]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
 8002ca2:	e006      	b.n	8002cb2 <HAL_GPIO_Init+0x1ea>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ca4:	4932      	ldr	r1, [pc, #200]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4013      	ands	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_GPIO_Init+0x204>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cbe:	492c      	ldr	r1, [pc, #176]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]
 8002cca:	e006      	b.n	8002cda <HAL_GPIO_Init+0x212>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ccc:	4928      	ldr	r1, [pc, #160]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002cce:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ce6:	4922      	ldr	r1, [pc, #136]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
 8002cf2:	e006      	b.n	8002d02 <HAL_GPIO_Init+0x23a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cf4:	491e      	ldr	r1, [pc, #120]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002cf6:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <HAL_GPIO_Init+0x254>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d0e:	4918      	ldr	r1, [pc, #96]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60cb      	str	r3, [r1, #12]
 8002d1a:	e006      	b.n	8002d2a <HAL_GPIO_Init+0x262>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d1c:	4914      	ldr	r1, [pc, #80]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002d1e:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_GPIO_Init+0x2a8>)
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	4013      	ands	r3, r2
 8002d28:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	f67f aeda 	bls.w	8002aec <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002d38:	bf00      	nop
 8002d3a:	372c      	adds	r7, #44	; 0x2c
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	10210000 	.word	0x10210000
 8002d48:	10110000 	.word	0x10110000
 8002d4c:	10120000 	.word	0x10120000
 8002d50:	10310000 	.word	0x10310000
 8002d54:	10320000 	.word	0x10320000
 8002d58:	10220000 	.word	0x10220000
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40010000 	.word	0x40010000
 8002d64:	40010800 	.word	0x40010800
 8002d68:	40010c00 	.word	0x40010c00
 8002d6c:	40011000 	.word	0x40011000
 8002d70:	40010400 	.word	0x40010400

08002d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d84:	787b      	ldrb	r3, [r7, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d90:	e003      	b.n	8002d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d92:	887b      	ldrh	r3, [r7, #2]
 8002d94:	041a      	lsls	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	611a      	str	r2, [r3, #16]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	405a      	eors	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0e7      	b.n	8002fb2 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe f96e 	bl	80010d8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e14:	f001 ff0a 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8002e18:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <HAL_I2C_Init+0x1f4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d807      	bhi.n	8002e34 <HAL_I2C_Init+0x6c>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4a66      	ldr	r2, [pc, #408]	; (8002fc0 <HAL_I2C_Init+0x1f8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	bf94      	ite	ls
 8002e2c:	2301      	movls	r3, #1
 8002e2e:	2300      	movhi	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e006      	b.n	8002e42 <HAL_I2C_Init+0x7a>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4a63      	ldr	r2, [pc, #396]	; (8002fc4 <HAL_I2C_Init+0x1fc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	bf94      	ite	ls
 8002e3c:	2301      	movls	r3, #1
 8002e3e:	2300      	movhi	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0b3      	b.n	8002fb2 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4a5e      	ldr	r2, [pc, #376]	; (8002fc8 <HAL_I2C_Init+0x200>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0c9b      	lsrs	r3, r3, #18
 8002e54:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4955      	ldr	r1, [pc, #340]	; (8002fbc <HAL_I2C_Init+0x1f4>)
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	d802      	bhi.n	8002e72 <HAL_I2C_Init+0xaa>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	e009      	b.n	8002e86 <HAL_I2C_Init+0xbe>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4953      	ldr	r1, [pc, #332]	; (8002fcc <HAL_I2C_Init+0x204>)
 8002e7e:	fba1 1303 	umull	r1, r3, r1, r3
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	3301      	adds	r3, #1
 8002e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <HAL_I2C_Init+0x1f4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d80d      	bhi.n	8002eb2 <HAL_I2C_Init+0xea>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf38      	it	cc
 8002eae:	2304      	movcc	r3, #4
 8002eb0:	e04f      	b.n	8002f52 <HAL_I2C_Init+0x18a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d111      	bne.n	8002ede <HAL_I2C_Init+0x116>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1e58      	subs	r0, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	e012      	b.n	8002f04 <HAL_I2C_Init+0x13c>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1e58      	subs	r0, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009a      	lsls	r2, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bf0c      	ite	eq
 8002efe:	2301      	moveq	r3, #1
 8002f00:	2300      	movne	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Init+0x144>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e022      	b.n	8002f52 <HAL_I2C_Init+0x18a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10e      	bne.n	8002f32 <HAL_I2C_Init+0x16a>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f30:	e00f      	b.n	8002f52 <HAL_I2C_Init+0x18a>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	1e58      	subs	r0, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	69d1      	ldr	r1, [r2, #28]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6a12      	ldr	r2, [r2, #32]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6911      	ldr	r1, [r2, #16]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	68d2      	ldr	r2, [r2, #12]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6951      	ldr	r1, [r2, #20]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6992      	ldr	r2, [r2, #24]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	000186a0 	.word	0x000186a0
 8002fc0:	001e847f 	.word	0x001e847f
 8002fc4:	003d08ff 	.word	0x003d08ff
 8002fc8:	431bde83 	.word	0x431bde83
 8002fcc:	10624dd3 	.word	0x10624dd3

08002fd0 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	f040 80a4 	bne.w	8003138 <HAL_I2C_Slave_Transmit_DMA+0x168>
  {
    if((pData == NULL) || (Size == 0U))
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_I2C_Slave_Transmit_DMA+0x2c>
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_I2C_Slave_Transmit_DMA+0x30>
    {
      return  HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e09c      	b.n	800313a <HAL_I2C_Slave_Transmit_DMA+0x16a>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_I2C_Slave_Transmit_DMA+0x174>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	4a50      	ldr	r2, [pc, #320]	; (8003148 <HAL_I2C_Slave_Transmit_DMA+0x178>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	0a1a      	lsrs	r2, r3, #8
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	617a      	str	r2, [r7, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10c      	bne.n	800303e <HAL_I2C_Slave_Transmit_DMA+0x6e>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 800303a:	2303      	movs	r3, #3
 800303c:	e07d      	b.n	800313a <HAL_I2C_Slave_Transmit_DMA+0x16a>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b02      	cmp	r3, #2
 800304a:	d0e6      	beq.n	800301a <HAL_I2C_Slave_Transmit_DMA+0x4a>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_I2C_Slave_Transmit_DMA+0x8a>
 8003056:	2302      	movs	r3, #2
 8003058:	e06f      	b.n	800313a <HAL_I2C_Slave_Transmit_DMA+0x16a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d007      	beq.n	8003080 <HAL_I2C_Slave_Transmit_DMA+0xb0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2221      	movs	r2, #33	; 0x21
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_I2C_Slave_Transmit_DMA+0x17c>)
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	4a22      	ldr	r2, [pc, #136]	; (8003150 <HAL_I2C_Slave_Transmit_DMA+0x180>)
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA error callback */
    hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	4a21      	ldr	r2, [pc, #132]	; (8003154 <HAL_I2C_Slave_Transmit_DMA+0x184>)
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	2200      	movs	r2, #0
 80030d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	2200      	movs	r2, #0
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	4619      	mov	r1, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3310      	adds	r3, #16
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	f7ff faca 	bl	8002690 <HAL_DMA_Start_IT>

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800310a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	6852      	ldr	r2, [r2, #4]
 800311e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003122:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	6852      	ldr	r2, [r2, #4]
 800312e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003132:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_I2C_Slave_Transmit_DMA+0x16a>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000000 	.word	0x20000000
 8003148:	14f8b589 	.word	0x14f8b589
 800314c:	ffff0000 	.word	0xffff0000
 8003150:	080042cd 	.word	0x080042cd
 8003154:	080043b9 	.word	0x080043b9

08003158 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800317e:	b2db      	uxtb	r3, r3
 8003180:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b10      	cmp	r3, #16
 8003186:	d002      	beq.n	800318e <HAL_I2C_EV_IRQHandler+0x36>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d172      	bne.n	8003274 <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0x52>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fbfd 	bl	80039a2 <I2C_Master_SB>
 80031a8:	e01a      	b.n	80031e0 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_I2C_EV_IRQHandler+0x1ec>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fc59 	bl	8003a76 <I2C_Master_ADD10>
 80031c4:	e00c      	b.n	80031e0 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4b5f      	ldr	r3, [pc, #380]	; (8003348 <HAL_I2C_EV_IRQHandler+0x1f0>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_I2C_EV_IRQHandler+0x88>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fc5b 	bl	8003a96 <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4b5a      	ldr	r3, [pc, #360]	; (800334c <HAL_I2C_EV_IRQHandler+0x1f4>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d022      	beq.n	8003230 <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4b58      	ldr	r3, [pc, #352]	; (8003350 <HAL_I2C_EV_IRQHandler+0x1f8>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0xb8>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_I2C_EV_IRQHandler+0xb8>
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4b54      	ldr	r3, [pc, #336]	; (8003354 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d103      	bne.n	8003210 <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f8fe 	bl	800340a <I2C_MasterTransmit_TXE>
 800320e:	e030      	b.n	8003272 <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 808f 	beq.w	800333a <HAL_I2C_EV_IRQHandler+0x1e2>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8089 	beq.w	800333a <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f9e3 	bl	80035f4 <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800322e:	e084      	b.n	800333a <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4b49      	ldr	r3, [pc, #292]	; (8003358 <HAL_I2C_EV_IRQHandler+0x200>)
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0xfe>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0xfe>
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa45 	bl	80036de <I2C_MasterReceive_RXNE>
 8003254:	e00d      	b.n	8003272 <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d06c      	beq.n	800333a <HAL_I2C_EV_IRQHandler+0x1e2>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003266:	2b00      	cmp	r3, #0
 8003268:	d067      	beq.n	800333a <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fad8 	bl	8003820 <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8003270:	e063      	b.n	800333a <HAL_I2C_EV_IRQHandler+0x1e2>
 8003272:	e062      	b.n	800333a <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0x138>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fe2b 	bl	8003ee4 <I2C_Slave_ADDR>
 800328e:	e055      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4b32      	ldr	r3, [pc, #200]	; (800335c <HAL_I2C_EV_IRQHandler+0x204>)
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0x154>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fe47 	bl	8003f38 <I2C_Slave_STOPF>
 80032aa:	e047      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_I2C_EV_IRQHandler+0x1f4>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_I2C_EV_IRQHandler+0x1f8>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x184>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x184>
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fd4b 	bl	8003d70 <I2C_SlaveTransmit_TXE>
 80032da:	e02f      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02a      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d025      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fd7a 	bl	8003dea <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 80032f6:	e021      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <HAL_I2C_EV_IRQHandler+0x200>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <HAL_I2C_EV_IRQHandler+0x1c6>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_I2C_EV_IRQHandler+0x1c6>
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fd86 	bl	8003e28 <I2C_SlaveReceive_RXNE>
 800331c:	e00e      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fdb6 	bl	8003ea4 <I2C_SlaveReceive_BTF>
}
 8003338:	e000      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800333a:	bf00      	nop
}
 800333c:	bf00      	nop
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	00010008 	.word	0x00010008
 8003348:	00010002 	.word	0x00010002
 800334c:	00100004 	.word	0x00100004
 8003350:	00010080 	.word	0x00010080
 8003354:	00010004 	.word	0x00010004
 8003358:	00010040 	.word	0x00010040
 800335c:	00010010 	.word	0x00010010

08003360 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	70fb      	strb	r3, [r7, #3]
 80033a2:	4613      	mov	r3, r2
 80033a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback can be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback can be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003422:	b2db      	uxtb	r3, r3
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d150      	bne.n	80034d6 <I2C_MasterTransmit_TXE+0xcc>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b21      	cmp	r3, #33	; 0x21
 8003438:	d14d      	bne.n	80034d6 <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d01d      	beq.n	800347c <I2C_MasterTransmit_TXE+0x72>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b08      	cmp	r3, #8
 8003444:	d01a      	beq.n	800347c <I2C_MasterTransmit_TXE+0x72>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800344c:	d016      	beq.n	800347c <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	6852      	ldr	r2, [r2, #4]
 8003458:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800345c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2211      	movs	r2, #17
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ff73 	bl	8003360 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800347a:	e0b6      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	6852      	ldr	r2, [r2, #4]
 8003486:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800348a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d107      	bne.n	80034c6 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ff7f 	bl	80033c2 <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034c4:	e091      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff46 	bl	8003360 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d4:	e089      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b21      	cmp	r3, #33	; 0x21
 80034da:	d006      	beq.n	80034ea <I2C_MasterTransmit_TXE+0xe0>
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	f040 8083 	bne.w	80035ea <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b22      	cmp	r3, #34	; 0x22
 80034e8:	d17f      	bne.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d108      	bne.n	8003506 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	e071      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b40      	cmp	r3, #64	; 0x40
 8003510:	d15b      	bne.n	80035ca <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11d      	bne.n	8003556 <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10b      	bne.n	800353a <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	1c9a      	adds	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	651a      	str	r2, [r3, #80]	; 0x50
 8003538:	e057      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003542:	b292      	uxth	r2, r2
 8003544:	1212      	asrs	r2, r2, #8
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	651a      	str	r2, [r3, #80]	; 0x50
 8003554:	e049      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	2b01      	cmp	r3, #1
 800355c:	d10b      	bne.n	8003576 <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	651a      	str	r2, [r3, #80]	; 0x50
 8003574:	e039      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	2b02      	cmp	r3, #2
 800357c:	d135      	bne.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b22      	cmp	r3, #34	; 0x22
 8003588:	d108      	bne.n	800359c <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e026      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b21      	cmp	r3, #33	; 0x21
 80035a6:	d120      	bne.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	1c58      	adds	r0, r3, #1
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	6248      	str	r0, [r1, #36]	; 0x24
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c8:	e00f      	b.n	80035ea <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c58      	adds	r0, r3, #1
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	6248      	str	r0, [r1, #36]	; 0x24
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b21      	cmp	r3, #33	; 0x21
 800360c:	d162      	bne.n	80036d4 <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c58      	adds	r0, r3, #1
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	6248      	str	r0, [r1, #36]	; 0x24
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003638:	e04c      	b.n	80036d4 <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d01d      	beq.n	800367c <I2C_MasterTransmit_BTF+0x88>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b08      	cmp	r3, #8
 8003644:	d01a      	beq.n	800367c <I2C_MasterTransmit_BTF+0x88>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800364c:	d016      	beq.n	800367c <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	6852      	ldr	r2, [r2, #4]
 8003658:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800365c:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2211      	movs	r2, #17
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff fe73 	bl	8003360 <HAL_I2C_MasterTxCpltCallback>
 800367a:	e02b      	b.n	80036d4 <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	6852      	ldr	r2, [r2, #4]
 8003686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800368a:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369a:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d107      	bne.n	80036c6 <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fe7f 	bl	80033c2 <HAL_I2C_MemTxCpltCallback>
 80036c4:	e006      	b.n	80036d4 <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fe46 	bl	8003360 <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b22      	cmp	r3, #34	; 0x22
 80036f0:	f040 8091 	bne.w	8003816 <I2C_MasterReceive_RXNE+0x138>
  {
    uint32_t tmp = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d911      	bls.n	800372a <I2C_MasterReceive_RXNE+0x4c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c59      	adds	r1, r3, #1
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6251      	str	r1, [r2, #36]	; 0x24
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	6912      	ldr	r2, [r2, #16]
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003728:	e075      	b.n	8003816 <I2C_MasterReceive_RXNE+0x138>
    }
    else if((tmp == 2U) || (tmp == 3U))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d002      	beq.n	8003736 <I2C_MasterReceive_RXNE+0x58>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d125      	bne.n	8003782 <I2C_MasterReceive_RXNE+0xa4>
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	2b02      	cmp	r3, #2
 800373c:	d010      	beq.n	8003760 <I2C_MasterReceive_RXNE+0x82>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374c:	601a      	str	r2, [r3, #0]
        
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e007      	b.n	8003770 <I2C_MasterReceive_RXNE+0x92>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800376e:	601a      	str	r2, [r3, #0]
      }
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	6852      	ldr	r2, [r2, #4]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	e049      	b.n	8003816 <I2C_MasterReceive_RXNE+0x138>
    }
    else
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	2b02      	cmp	r3, #2
 8003788:	d008      	beq.n	800379c <I2C_MasterReceive_RXNE+0xbe>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e007      	b.n	80037ac <I2C_MasterReceive_RXNE+0xce>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037aa:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	6852      	ldr	r2, [r2, #4]
 80037b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ba:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c59      	adds	r1, r3, #1
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6251      	str	r1, [r2, #36]	; 0x24
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	6912      	ldr	r2, [r2, #16]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d107      	bne.n	8003808 <I2C_MasterReceive_RXNE+0x12a>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fde7 	bl	80033d4 <HAL_I2C_MemRxCpltCallback>
 8003806:	e006      	b.n	8003816 <I2C_MasterReceive_RXNE+0x138>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff fdae 	bl	8003372 <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 3U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b03      	cmp	r3, #3
 8003836:	d123      	bne.n	8003880 <I2C_MasterReceive_BTF+0x60>
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b04      	cmp	r3, #4
 800383c:	d006      	beq.n	800384c <I2C_MasterReceive_BTF+0x2c>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d003      	beq.n	800384c <I2C_MasterReceive_BTF+0x2c>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800384a:	d107      	bne.n	800385c <I2C_MasterReceive_BTF+0x3c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385a:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c59      	adds	r1, r3, #1
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6251      	str	r1, [r2, #36]	; 0x24
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	6912      	ldr	r2, [r2, #16]
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800387e:	e08b      	b.n	8003998 <I2C_MasterReceive_BTF+0x178>
  }
  else if(hi2c->XferCount == 2U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d175      	bne.n	8003976 <I2C_MasterReceive_BTF+0x156>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d023      	beq.n	80038d8 <I2C_MasterReceive_BTF+0xb8>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b08      	cmp	r3, #8
 8003894:	d020      	beq.n	80038d8 <I2C_MasterReceive_BTF+0xb8>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800389c:	d01c      	beq.n	80038d8 <I2C_MasterReceive_BTF+0xb8>
    {
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d008      	beq.n	80038b6 <I2C_MasterReceive_BTF+0x96>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e007      	b.n	80038c6 <I2C_MasterReceive_BTF+0xa6>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c4:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	6852      	ldr	r2, [r2, #4]
 80038d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	e00f      	b.n	80038f8 <I2C_MasterReceive_BTF+0xd8>
    }
    else
    {
      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	6852      	ldr	r2, [r2, #4]
 80038e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038e6:	605a      	str	r2, [r3, #4]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f6:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	1c59      	adds	r1, r3, #1
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6251      	str	r1, [r2, #36]	; 0x24
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	6912      	ldr	r2, [r2, #16]
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	1c59      	adds	r1, r3, #1
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6251      	str	r1, [r2, #36]	; 0x24
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	6912      	ldr	r2, [r2, #16]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d107      	bne.n	8003966 <I2C_MasterReceive_BTF+0x146>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fd38 	bl	80033d4 <HAL_I2C_MemRxCpltCallback>
 8003964:	e018      	b.n	8003998 <I2C_MasterReceive_BTF+0x178>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fcff 	bl	8003372 <HAL_I2C_MasterRxCpltCallback>
 8003974:	e010      	b.n	8003998 <I2C_MasterReceive_BTF+0x178>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c59      	adds	r1, r3, #1
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6251      	str	r1, [r2, #36]	; 0x24
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	6912      	ldr	r2, [r2, #16]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d116      	bne.n	80039e4 <I2C_Master_SB+0x42>
  {
    if(hi2c->EventCount == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d108      	bne.n	80039d0 <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039cc:	611a      	str	r2, [r3, #16]
 80039ce:	e04c      	b.n	8003a6a <I2C_Master_SB+0xc8>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	611a      	str	r2, [r3, #16]
 80039e2:	e042      	b.n	8003a6a <I2C_Master_SB+0xc8>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ec:	d118      	bne.n	8003a20 <I2C_Master_SB+0x7e>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b21      	cmp	r3, #33	; 0x21
 80039f8:	d108      	bne.n	8003a0c <I2C_Master_SB+0x6a>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	e02e      	b.n	8003a6a <I2C_Master_SB+0xc8>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	e024      	b.n	8003a6a <I2C_Master_SB+0xc8>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10e      	bne.n	8003a46 <I2C_Master_SB+0xa4>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a30:	b292      	uxth	r2, r2
 8003a32:	11d2      	asrs	r2, r2, #7
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	f002 0206 	and.w	r2, r2, #6
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	f062 020f 	orn	r2, r2, #15
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	611a      	str	r2, [r3, #16]
 8003a44:	e011      	b.n	8003a6a <I2C_Master_SB+0xc8>
      }
      else if(hi2c->EventCount == 1U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d10d      	bne.n	8003a6a <I2C_Master_SB+0xc8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a56:	b292      	uxth	r2, r2
 8003a58:	11d2      	asrs	r2, r2, #7
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f002 0206 	and.w	r2, r2, #6
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	f062 020e 	orn	r2, r2, #14
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b091      	sub	sp, #68	; 0x44
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b22      	cmp	r3, #34	; 0x22
 8003abe:	f040 8146 	bne.w	8003d4e <I2C_Master_ADDR+0x2b8>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10e      	bne.n	8003ae8 <I2C_Master_ADDR+0x52>
 8003aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d10b      	bne.n	8003ae8 <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	e13d      	b.n	8003d64 <I2C_Master_ADDR+0x2ce>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d11d      	bne.n	8003b2c <I2C_Master_ADDR+0x96>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003af8:	d118      	bne.n	8003b2c <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afa:	2300      	movs	r3, #0
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1e:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	651a      	str	r2, [r3, #80]	; 0x50
 8003b2a:	e11b      	b.n	8003d64 <I2C_Master_ADDR+0x2ce>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d113      	bne.n	8003b5e <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e0f3      	b.n	8003d46 <I2C_Master_ADDR+0x2b0>
      }
      else if(hi2c->XferCount == 1U)   
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 8082 	bne.w	8003c6e <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b70:	d137      	bne.n	8003be2 <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b80:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b90:	d113      	bne.n	8003bba <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	e0c5      	b.n	8003d46 <I2C_Master_ADDR+0x2b0>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e0b1      	b.n	8003d46 <I2C_Master_ADDR+0x2b0>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d026      	beq.n	8003c36 <I2C_Master_ADDR+0x1a0>
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d023      	beq.n	8003c36 <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf0:	2b12      	cmp	r3, #18
 8003bf2:	d020      	beq.n	8003c36 <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d008      	beq.n	8003c0e <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e007      	b.n	8003c1e <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c1c:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	e087      	b.n	8003d46 <I2C_Master_ADDR+0x2b0>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c44:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e06b      	b.n	8003d46 <I2C_Master_ADDR+0x2b0>
        }
      }
      else if(hi2c->XferCount == 2U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d143      	bne.n	8003d00 <I2C_Master_ADDR+0x26a>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d01b      	beq.n	8003cb8 <I2C_Master_ADDR+0x222>
        {
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c8e:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	697b      	ldr	r3, [r7, #20]
          
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e012      	b.n	8003cde <I2C_Master_ADDR+0x248>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc6:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cec:	d12b      	bne.n	8003d46 <I2C_Master_ADDR+0x2b0>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	6852      	ldr	r2, [r2, #4]
 8003cf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	e022      	b.n	8003d46 <I2C_Master_ADDR+0x2b0>
        }
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d0e:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1e:	d107      	bne.n	8003d30 <I2C_Master_ADDR+0x29a>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	6852      	ldr	r2, [r2, #4]
 8003d2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d2e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d4c:	e00a      	b.n	8003d64 <I2C_Master_ADDR+0x2ce>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]
  }

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3744      	adds	r7, #68	; 0x44
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d029      	beq.n	8003de0 <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	1c58      	adds	r0, r3, #1
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	6248      	str	r0, [r1, #36]	; 0x24
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d114      	bne.n	8003de0 <I2C_SlaveTransmit_TXE+0x70>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b29      	cmp	r3, #41	; 0x29
 8003dba:	d111      	bne.n	8003de0 <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	6852      	ldr	r2, [r2, #4]
 8003dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dca:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2221      	movs	r2, #33	; 0x21
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2228      	movs	r2, #40	; 0x28
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fbf8 	bl	80015d0 <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00f      	beq.n	8003e1c <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	1c58      	adds	r0, r3, #1
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	6248      	str	r0, [r1, #36]	; 0x24
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d02a      	beq.n	8003e9a <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c59      	adds	r1, r3, #1
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	6912      	ldr	r2, [r2, #16]
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d114      	bne.n	8003e9a <I2C_SlaveReceive_RXNE+0x72>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b2a      	cmp	r3, #42	; 0x2a
 8003e74:	d111      	bne.n	8003e9a <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	6852      	ldr	r2, [r2, #4]
 8003e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2222      	movs	r2, #34	; 0x22
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2228      	movs	r2, #40	; 0x28
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fa75 	bl	8003384 <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d010      	beq.n	8003ed8 <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c59      	adds	r1, r3, #1
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6251      	str	r1, [r2, #36]	; 0x24
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	6912      	ldr	r2, [r2, #16]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d001      	beq.n	8003f06 <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f10:	2b80      	cmp	r3, #128	; 0x80
 8003f12:	d003      	beq.n	8003f1c <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	81bb      	strh	r3, [r7, #12]
 8003f1a:	e002      	b.n	8003f22 <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f22:	89ba      	ldrh	r2, [r7, #12]
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fa34 	bl	8003396 <HAL_I2C_AddrCallback>

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	6852      	ldr	r2, [r2, #4]
 8003f54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f58:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f86:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f96:	d11a      	bne.n	8003fce <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b22      	cmp	r3, #34	; 0x22
 8003fa2:	d005      	beq.n	8003fb0 <I2C_Slave_STOPF+0x78>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b2a      	cmp	r3, #42	; 0x2a
 8003fae:	d107      	bne.n	8003fc0 <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fbe:	e006      	b.n	8003fce <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d035      	beq.n	8004044 <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d110      	bne.n	8004008 <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	1c59      	adds	r1, r3, #1
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6251      	str	r1, [r2, #36]	; 0x24
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	6912      	ldr	r2, [r2, #16]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d110      	bne.n	8004038 <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6251      	str	r1, [r2, #36]	; 0x24
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	6912      	ldr	r2, [r2, #16]
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f043 0204 	orr.w	r2, r3, #4
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f839 	bl	80040c4 <I2C_ITError>
 8004052:	e02f      	b.n	80040b4 <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b28      	cmp	r3, #40	; 0x28
 8004058:	d005      	beq.n	8004066 <I2C_Slave_STOPF+0x12e>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b2a      	cmp	r3, #42	; 0x2a
 800405e:	d002      	beq.n	8004066 <I2C_Slave_STOPF+0x12e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b29      	cmp	r3, #41	; 0x29
 8004064:	d111      	bne.n	800408a <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <I2C_Slave_STOPF+0x188>)
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff f994 	bl	80033b0 <HAL_I2C_ListenCpltCallback>
 8004088:	e014      	b.n	80040b4 <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	2b22      	cmp	r3, #34	; 0x22
 8004090:	d002      	beq.n	8004098 <I2C_Slave_STOPF+0x160>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b22      	cmp	r3, #34	; 0x22
 8004096:	d10d      	bne.n	80040b4 <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff f968 	bl	8003384 <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	ffff0000 	.word	0xffff0000

080040c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b29      	cmp	r3, #41	; 0x29
 80040da:	d002      	beq.n	80040e2 <I2C_ITError+0x1e>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b2a      	cmp	r3, #42	; 0x2a
 80040e0:	d107      	bne.n	80040f2 <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2228      	movs	r2, #40	; 0x28
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040f0:	e018      	b.n	8004124 <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b60      	cmp	r3, #96	; 0x60
 80040fc:	d00b      	beq.n	8004116 <I2C_ITError+0x52>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410c:	d003      	beq.n	8004116 <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004132:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004142:	d15f      	bne.n	8004204 <I2C_ITError+0x140>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	6852      	ldr	r2, [r2, #4]
 800414e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004152:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800415c:	2b01      	cmp	r3, #1
 800415e:	d020      	beq.n	80041a2 <I2C_ITError+0xde>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	4a57      	ldr	r2, [pc, #348]	; (80042c4 <I2C_ITError+0x200>)
 8004166:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe faef 	bl	8002750 <HAL_DMA_Abort_IT>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8083 	beq.w	8004280 <I2C_ITError+0x1bc>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800419c:	4610      	mov	r0, r2
 800419e:	4798      	blx	r3
 80041a0:	e06e      	b.n	8004280 <I2C_ITError+0x1bc>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	4a47      	ldr	r2, [pc, #284]	; (80042c4 <I2C_ITError+0x200>)
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe face 	bl	8002750 <HAL_DMA_Abort_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d062      	beq.n	8004280 <I2C_ITError+0x1bc>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d109      	bne.n	80041dc <I2C_ITError+0x118>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	1c59      	adds	r1, r3, #1
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6251      	str	r1, [r2, #36]	; 0x24
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	6912      	ldr	r2, [r2, #16]
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041fe:	4610      	mov	r0, r2
 8004200:	4798      	blx	r3
 8004202:	e03d      	b.n	8004280 <I2C_ITError+0x1bc>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b60      	cmp	r3, #96	; 0x60
 800420e:	d123      	bne.n	8004258 <I2C_ITError+0x194>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d109      	bne.n	8004240 <I2C_ITError+0x17c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	1c59      	adds	r1, r3, #1
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6251      	str	r1, [r2, #36]	; 0x24
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6912      	ldr	r2, [r2, #16]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff f8d1 	bl	80033f8 <HAL_I2C_AbortCpltCallback>
 8004256:	e013      	b.n	8004280 <I2C_ITError+0x1bc>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d109      	bne.n	800427a <I2C_ITError+0x1b6>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6251      	str	r1, [r2, #36]	; 0x24
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	6912      	ldr	r2, [r2, #16]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff f8b3 	bl	80033e6 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b28      	cmp	r3, #40	; 0x28
 800428a:	d116      	bne.n	80042ba <I2C_ITError+0x1f6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b04      	cmp	r3, #4
 8004296:	d110      	bne.n	80042ba <I2C_ITError+0x1f6>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <I2C_ITError+0x204>)
 800429c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff f87b 	bl	80033b0 <HAL_I2C_ListenCpltCallback>
  }
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	08004407 	.word	0x08004407
 80042c8:	ffff0000 	.word	0xffff0000

080042cc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	617b      	str	r3, [r7, #20]
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	613b      	str	r3, [r7, #16]
  uint32_t CurrentMode  = hi2c->Mode;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b21      	cmp	r3, #33	; 0x21
 80042f2:	d005      	beq.n	8004300 <I2C_DMAXferCplt+0x34>
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b22      	cmp	r3, #34	; 0x22
 80042f8:	d116      	bne.n	8004328 <I2C_DMAXferCplt+0x5c>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d113      	bne.n	8004328 <I2C_DMAXferCplt+0x5c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	6852      	ldr	r2, [r2, #4]
 800430a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430e:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2200      	movs	r2, #0
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
    
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	6852      	ldr	r2, [r2, #4]
 8004320:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004324:	605a      	str	r2, [r3, #4]

        HAL_I2C_MasterRxCpltCallback(hi2c);
      }
    }
  }
}
 8004326:	e043      	b.n	80043b0 <I2C_DMAXferCplt+0xe4>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	6852      	ldr	r2, [r2, #4]
 8004352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004356:	605a      	str	r2, [r3, #4]
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	6852      	ldr	r2, [r2, #4]
 8004362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004366:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <I2C_DMAXferCplt+0xb2>
      HAL_I2C_ErrorCallback(hi2c);
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f7ff f835 	bl	80033e6 <HAL_I2C_ErrorCallback>
}
 800437c:	e018      	b.n	80043b0 <I2C_DMAXferCplt+0xe4>
      hi2c->State = HAL_I2C_STATE_READY;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d107      	bne.n	80043a2 <I2C_DMAXferCplt+0xd6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 800439a:	6978      	ldr	r0, [r7, #20]
 800439c:	f7ff f81a 	bl	80033d4 <HAL_I2C_MemRxCpltCallback>
}
 80043a0:	e006      	b.n	80043b0 <I2C_DMAXferCplt+0xe4>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80043aa:	6978      	ldr	r0, [r7, #20]
 80043ac:	f7fe ffe1 	bl	8003372 <HAL_I2C_MasterRxCpltCallback>
}
 80043b0:	bf00      	nop
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]
  
  hi2c->XferCount = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
  
  hi2c->State = HAL_I2C_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f043 0210 	orr.w	r2, r3, #16
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
  
    HAL_I2C_ErrorCallback(hi2c);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7fe fff4 	bl	80033e6 <HAL_I2C_ErrorCallback>
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004422:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	2200      	movs	r2, #0
 8004430:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	2200      	movs	r2, #0
 8004438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b60      	cmp	r3, #96	; 0x60
 8004444:	d116      	bne.n	8004474 <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7fe ffc3 	bl	80033f8 <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8004472:	e012      	b.n	800449a <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7fe ffa6 	bl	80033e6 <HAL_I2C_ErrorCallback>
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8087 	beq.w	80045cc <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80044be:	4b92      	ldr	r3, [pc, #584]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044ca:	4b8f      	ldr	r3, [pc, #572]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d112      	bne.n	80044fc <HAL_RCC_OscConfig+0x58>
 80044d6:	4b8c      	ldr	r3, [pc, #560]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e2:	d10b      	bne.n	80044fc <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	4b88      	ldr	r3, [pc, #544]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d06c      	beq.n	80045ca <HAL_RCC_OscConfig+0x126>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d168      	bne.n	80045ca <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e22d      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	d106      	bne.n	8004514 <HAL_RCC_OscConfig+0x70>
 8004506:	4a80      	ldr	r2, [pc, #512]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004508:	4b7f      	ldr	r3, [pc, #508]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e02e      	b.n	8004572 <HAL_RCC_OscConfig+0xce>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10c      	bne.n	8004536 <HAL_RCC_OscConfig+0x92>
 800451c:	4a7a      	ldr	r2, [pc, #488]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 800451e:	4b7a      	ldr	r3, [pc, #488]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4a77      	ldr	r2, [pc, #476]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 800452a:	4b77      	ldr	r3, [pc, #476]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e01d      	b.n	8004572 <HAL_RCC_OscConfig+0xce>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800453e:	d10c      	bne.n	800455a <HAL_RCC_OscConfig+0xb6>
 8004540:	4a71      	ldr	r2, [pc, #452]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004542:	4b71      	ldr	r3, [pc, #452]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4a6e      	ldr	r2, [pc, #440]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 800454e:	4b6e      	ldr	r3, [pc, #440]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e00b      	b.n	8004572 <HAL_RCC_OscConfig+0xce>
 800455a:	4a6b      	ldr	r2, [pc, #428]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 800455c:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4a68      	ldr	r2, [pc, #416]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004568:	4b67      	ldr	r3, [pc, #412]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d013      	beq.n	80045a2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd f92b 	bl	80017d4 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004582:	f7fd f927 	bl	80017d4 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	; 0x64
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1e1      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004594:	4b5c      	ldr	r3, [pc, #368]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0xde>
 80045a0:	e014      	b.n	80045cc <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fd f917 	bl	80017d4 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045aa:	f7fd f913 	bl	80017d4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b64      	cmp	r3, #100	; 0x64
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1cd      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045bc:	4b52      	ldr	r3, [pc, #328]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCC_OscConfig+0x106>
 80045c8:	e000      	b.n	80045cc <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d063      	beq.n	80046a0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045d8:	4b4b      	ldr	r3, [pc, #300]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045e4:	4b48      	ldr	r3, [pc, #288]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d11c      	bne.n	800462a <HAL_RCC_OscConfig+0x186>
 80045f0:	4b45      	ldr	r3, [pc, #276]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d116      	bne.n	800462a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fc:	4b42      	ldr	r3, [pc, #264]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_OscConfig+0x170>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d001      	beq.n	8004614 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e1a1      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004614:	493c      	ldr	r1, [pc, #240]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004616:	4b3c      	ldr	r3, [pc, #240]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4313      	orrs	r3, r2
 8004626:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004628:	e03a      	b.n	80046a0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d020      	beq.n	8004674 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004632:	4b36      	ldr	r3, [pc, #216]	; (800470c <HAL_RCC_OscConfig+0x268>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fd f8cc 	bl	80017d4 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004640:	f7fd f8c8 	bl	80017d4 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e182      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004652:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	492a      	ldr	r1, [pc, #168]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004660:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
 8004672:	e015      	b.n	80046a0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <HAL_RCC_OscConfig+0x268>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467a:	f7fd f8ab 	bl	80017d4 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004682:	f7fd f8a7 	bl	80017d4 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e161      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004694:	4b1c      	ldr	r3, [pc, #112]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d039      	beq.n	8004720 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d019      	beq.n	80046e8 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b4:	4b16      	ldr	r3, [pc, #88]	; (8004710 <HAL_RCC_OscConfig+0x26c>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ba:	f7fd f88b 	bl	80017d4 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c2:	f7fd f887 	bl	80017d4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e141      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <HAL_RCC_OscConfig+0x264>)
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80046e0:	2001      	movs	r0, #1
 80046e2:	f000 fab7 	bl	8004c54 <RCC_Delay>
 80046e6:	e01b      	b.n	8004720 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x26c>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ee:	f7fd f871 	bl	80017d4 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	e00e      	b.n	8004714 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fd f86d 	bl	80017d4 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d907      	bls.n	8004714 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e127      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
 8004708:	40021000 	.word	0x40021000
 800470c:	42420000 	.word	0x42420000
 8004710:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	4b92      	ldr	r3, [pc, #584]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ea      	bne.n	80046f6 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80a6 	beq.w	800487a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004732:	4b8b      	ldr	r3, [pc, #556]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4a88      	ldr	r2, [pc, #544]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004740:	4b87      	ldr	r3, [pc, #540]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	61d3      	str	r3, [r2, #28]
 800474a:	4b85      	ldr	r3, [pc, #532]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004756:	2301      	movs	r3, #1
 8004758:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475a:	4b82      	ldr	r3, [pc, #520]	; (8004964 <HAL_RCC_OscConfig+0x4c0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d118      	bne.n	8004798 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004766:	4a7f      	ldr	r2, [pc, #508]	; (8004964 <HAL_RCC_OscConfig+0x4c0>)
 8004768:	4b7e      	ldr	r3, [pc, #504]	; (8004964 <HAL_RCC_OscConfig+0x4c0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004772:	f7fd f82f 	bl	80017d4 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477a:	f7fd f82b 	bl	80017d4 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b64      	cmp	r3, #100	; 0x64
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e0e5      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	4b75      	ldr	r3, [pc, #468]	; (8004964 <HAL_RCC_OscConfig+0x4c0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d106      	bne.n	80047ae <HAL_RCC_OscConfig+0x30a>
 80047a0:	4a6f      	ldr	r2, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047a2:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6213      	str	r3, [r2, #32]
 80047ac:	e02d      	b.n	800480a <HAL_RCC_OscConfig+0x366>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x32c>
 80047b6:	4a6a      	ldr	r2, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047b8:	4b69      	ldr	r3, [pc, #420]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	6213      	str	r3, [r2, #32]
 80047c2:	4a67      	ldr	r2, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047c4:	4b66      	ldr	r3, [pc, #408]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	6213      	str	r3, [r2, #32]
 80047ce:	e01c      	b.n	800480a <HAL_RCC_OscConfig+0x366>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b05      	cmp	r3, #5
 80047d6:	d10c      	bne.n	80047f2 <HAL_RCC_OscConfig+0x34e>
 80047d8:	4a61      	ldr	r2, [pc, #388]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047da:	4b61      	ldr	r3, [pc, #388]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	6213      	str	r3, [r2, #32]
 80047e4:	4a5e      	ldr	r2, [pc, #376]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047e6:	4b5e      	ldr	r3, [pc, #376]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6213      	str	r3, [r2, #32]
 80047f0:	e00b      	b.n	800480a <HAL_RCC_OscConfig+0x366>
 80047f2:	4a5b      	ldr	r2, [pc, #364]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047f4:	4b5a      	ldr	r3, [pc, #360]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	6213      	str	r3, [r2, #32]
 80047fe:	4a58      	ldr	r2, [pc, #352]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004800:	4b57      	ldr	r3, [pc, #348]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d015      	beq.n	800483e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004812:	f7fc ffdf 	bl	80017d4 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fc ffdb 	bl	80017d4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e093      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004830:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ee      	beq.n	800481a <HAL_RCC_OscConfig+0x376>
 800483c:	e014      	b.n	8004868 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483e:	f7fc ffc9 	bl	80017d4 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004844:	e00a      	b.n	800485c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fc ffc5 	bl	80017d4 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e07d      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485c:	4b40      	ldr	r3, [pc, #256]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ee      	bne.n	8004846 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486e:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004870:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d069      	beq.n	8004956 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b08      	cmp	r3, #8
 800488c:	d061      	beq.n	8004952 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d146      	bne.n	8004924 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fc ff9a 	bl	80017d4 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fc ff96 	bl	80017d4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e050      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d108      	bne.n	80048de <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048cc:	4924      	ldr	r1, [pc, #144]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048de:	4820      	ldr	r0, [pc, #128]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80048e0:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a19      	ldr	r1, [r3, #32]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	430b      	orrs	r3, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f6:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fc ff6a 	bl	80017d4 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fc ff66 	bl	80017d4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e020      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x460>
 8004922:	e018      	b.n	8004956 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fc ff53 	bl	80017d4 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004932:	f7fc ff4f 	bl	80017d4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e009      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_RCC_OscConfig+0x4bc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x48e>
 8004950:	e001      	b.n	8004956 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	42420060 	.word	0x42420060

0800496c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800497a:	4b72      	ldr	r3, [pc, #456]	; (8004b44 <HAL_RCC_ClockConfig+0x1d8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0207 	and.w	r2, r3, #7
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d210      	bcs.n	80049aa <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004988:	496e      	ldr	r1, [pc, #440]	; (8004b44 <HAL_RCC_ClockConfig+0x1d8>)
 800498a:	4b6e      	ldr	r3, [pc, #440]	; (8004b44 <HAL_RCC_ClockConfig+0x1d8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 0207 	bic.w	r2, r3, #7
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004998:	4b6a      	ldr	r3, [pc, #424]	; (8004b44 <HAL_RCC_ClockConfig+0x1d8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0207 	and.w	r2, r3, #7
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d001      	beq.n	80049aa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0c8      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b6:	4964      	ldr	r1, [pc, #400]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 80049b8:	4b63      	ldr	r3, [pc, #396]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d06a      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049dc:	4b5a      	ldr	r3, [pc, #360]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d115      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0a7      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f4:	4b54      	ldr	r3, [pc, #336]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e09b      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a04:	4b50      	ldr	r3, [pc, #320]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e093      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a14:	494c      	ldr	r1, [pc, #304]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004a16:	4b4c      	ldr	r3, [pc, #304]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f023 0203 	bic.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a26:	f7fc fed5 	bl	80017d4 <HAL_GetTick>
 8004a2a:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d112      	bne.n	8004a5a <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a36:	f7fc fecd 	bl	80017d4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e077      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4c:	4b3e      	ldr	r3, [pc, #248]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 030c 	and.w	r3, r3, #12
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d1ee      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xca>
 8004a58:	e027      	b.n	8004aaa <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d11d      	bne.n	8004a9e <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fc feb6 	bl	80017d4 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e060      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7a:	4b33      	ldr	r3, [pc, #204]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d1ee      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
 8004a86:	e010      	b.n	8004aaa <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fc fea4 	bl	80017d4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e04e      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a9e:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ee      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <HAL_RCC_ClockConfig+0x1d8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0207 	and.w	r2, r3, #7
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d910      	bls.n	8004ada <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab8:	4922      	ldr	r1, [pc, #136]	; (8004b44 <HAL_RCC_ClockConfig+0x1d8>)
 8004aba:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <HAL_RCC_ClockConfig+0x1d8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 0207 	bic.w	r2, r3, #7
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <HAL_RCC_ClockConfig+0x1d8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0207 	and.w	r2, r3, #7
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e030      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae6:	4918      	ldr	r1, [pc, #96]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b04:	4910      	ldr	r1, [pc, #64]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b18:	f000 f81c 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <HAL_RCC_ClockConfig+0x1dc>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	4a08      	ldr	r2, [pc, #32]	; (8004b4c <HAL_RCC_ClockConfig+0x1e0>)
 8004b2a:	5cd3      	ldrb	r3, [r2, r3]
 8004b2c:	fa21 f303 	lsr.w	r3, r1, r3
 8004b30:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <HAL_RCC_ClockConfig+0x1e4>)
 8004b32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b34:	2000      	movs	r0, #0
 8004b36:	f7fc fe0b 	bl	8001750 <HAL_InitTick>
  
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40022000 	.word	0x40022000
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	08004eac 	.word	0x08004eac
 8004b50:	20000000 	.word	0x20000000

08004b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	b490      	push	{r4, r7}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b5a:	4b2a      	ldr	r3, [pc, #168]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b5c:	1d3c      	adds	r4, r7, #4
 8004b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b64:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	2300      	movs	r3, #0
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b7e:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x40>
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0x46>
 8004b92:	e02d      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b94:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b96:	623b      	str	r3, [r7, #32]
      break;
 8004b98:	e02d      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	0c9b      	lsrs	r3, r3, #18
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0c5b      	lsrs	r3, r3, #17
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bcc:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bd2:	fb02 f203 	mul.w	r2, r2, r3
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bde:	e004      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	; (8004c14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004be4:	fb02 f303 	mul.w	r3, r2, r3
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	623b      	str	r3, [r7, #32]
      break;
 8004bee:	e002      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bf2:	623b      	str	r3, [r7, #32]
      break;
 8004bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3728      	adds	r7, #40	; 0x28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc90      	pop	{r4, r7}
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	08004e98 	.word	0x08004e98
 8004c08:	08004ea8 	.word	0x08004ea8
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	007a1200 	.word	0x007a1200
 8004c14:	003d0900 	.word	0x003d0900

08004c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c1c:	4b02      	ldr	r3, [pc, #8]	; (8004c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr
 8004c28:	20000000 	.word	0x20000000

08004c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c30:	f7ff fff2 	bl	8004c18 <HAL_RCC_GetHCLKFreq>
 8004c34:	4601      	mov	r1, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4a03      	ldr	r2, [pc, #12]	; (8004c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	08004ebc 	.word	0x08004ebc

08004c54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <RCC_Delay+0x34>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <RCC_Delay+0x38>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	0a5b      	lsrs	r3, r3, #9
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004c70:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1e5a      	subs	r2, r3, #1
 8004c76:	60fa      	str	r2, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f9      	bne.n	8004c70 <RCC_Delay+0x1c>
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bc80      	pop	{r7}
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	10624dd3 	.word	0x10624dd3

08004c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d07d      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004cac:	2300      	movs	r3, #0
 8004cae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb0:	4b4f      	ldr	r3, [pc, #316]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10d      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4a4c      	ldr	r2, [pc, #304]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	4b4c      	ldr	r3, [pc, #304]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	61d3      	str	r3, [r2, #28]
 8004cc8:	4b49      	ldr	r3, [pc, #292]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d118      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce4:	4a43      	ldr	r2, [pc, #268]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf0:	f7fc fd70 	bl	80017d4 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	e008      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf8:	f7fc fd6c 	bl	80017d4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e06d      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0a:	4b3a      	ldr	r3, [pc, #232]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d16:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02e      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d027      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d34:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d3e:	4b2e      	ldr	r3, [pc, #184]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d44:	4b2c      	ldr	r3, [pc, #176]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d4a:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5a:	f7fc fd3b 	bl	80017d4 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d60:	e00a      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d62:	f7fc fd37 	bl	80017d4 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e036      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ee      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d84:	491a      	ldr	r1, [pc, #104]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d86:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db4:	490e      	ldr	r1, [pc, #56]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd2:	4907      	ldr	r1, [pc, #28]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
 8004df8:	42420440 	.word	0x42420440

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	2500      	movs	r5, #0
 8004e00:	4e0c      	ldr	r6, [pc, #48]	; (8004e34 <__libc_init_array+0x38>)
 8004e02:	4c0d      	ldr	r4, [pc, #52]	; (8004e38 <__libc_init_array+0x3c>)
 8004e04:	1ba4      	subs	r4, r4, r6
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	42a5      	cmp	r5, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	f000 f81a 	bl	8004e44 <_init>
 8004e10:	2500      	movs	r5, #0
 8004e12:	4e0a      	ldr	r6, [pc, #40]	; (8004e3c <__libc_init_array+0x40>)
 8004e14:	4c0a      	ldr	r4, [pc, #40]	; (8004e40 <__libc_init_array+0x44>)
 8004e16:	1ba4      	subs	r4, r4, r6
 8004e18:	10a4      	asrs	r4, r4, #2
 8004e1a:	42a5      	cmp	r5, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e24:	4798      	blx	r3
 8004e26:	3501      	adds	r5, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e2e:	4798      	blx	r3
 8004e30:	3501      	adds	r5, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	08004ec4 	.word	0x08004ec4
 8004e38:	08004ec4 	.word	0x08004ec4
 8004e3c:	08004ec4 	.word	0x08004ec4
 8004e40:	08004ec8 	.word	0x08004ec8

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr
