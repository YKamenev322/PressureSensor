
PressureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08004dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000164  2000000c  08004e08  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000170  08004e08  00020170  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001356b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002831  00000000  00000000  000335a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000958  00000000  00000000  00035dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000830  00000000  00000000  00036730  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00015e7b  00000000  00000000  00036f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000094ca  00000000  00000000  0004cddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0006dac6  00000000  00000000  000562a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000c3d6b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002564  00000000  00000000  000c3de8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004db0 	.word	0x08004db0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08004db0 	.word	0x08004db0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_frsub>:
 8000984:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000988:	e002      	b.n	8000990 <__addsf3>
 800098a:	bf00      	nop

0800098c <__aeabi_fsub>:
 800098c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000990 <__addsf3>:
 8000990:	0042      	lsls	r2, r0, #1
 8000992:	bf1f      	itttt	ne
 8000994:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000998:	ea92 0f03 	teqne	r2, r3
 800099c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a4:	d06a      	beq.n	8000a7c <__addsf3+0xec>
 80009a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ae:	bfc1      	itttt	gt
 80009b0:	18d2      	addgt	r2, r2, r3
 80009b2:	4041      	eorgt	r1, r0
 80009b4:	4048      	eorgt	r0, r1
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	bfb8      	it	lt
 80009ba:	425b      	neglt	r3, r3
 80009bc:	2b19      	cmp	r3, #25
 80009be:	bf88      	it	hi
 80009c0:	4770      	bxhi	lr
 80009c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009de:	bf18      	it	ne
 80009e0:	4249      	negne	r1, r1
 80009e2:	ea92 0f03 	teq	r2, r3
 80009e6:	d03f      	beq.n	8000a68 <__addsf3+0xd8>
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	fa41 fc03 	asr.w	ip, r1, r3
 80009f0:	eb10 000c 	adds.w	r0, r0, ip
 80009f4:	f1c3 0320 	rsb	r3, r3, #32
 80009f8:	fa01 f103 	lsl.w	r1, r1, r3
 80009fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a00:	d502      	bpl.n	8000a08 <__addsf3+0x78>
 8000a02:	4249      	negs	r1, r1
 8000a04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a0c:	d313      	bcc.n	8000a36 <__addsf3+0xa6>
 8000a0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a12:	d306      	bcc.n	8000a22 <__addsf3+0x92>
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1a:	f102 0201 	add.w	r2, r2, #1
 8000a1e:	2afe      	cmp	r2, #254	; 0xfe
 8000a20:	d251      	bcs.n	8000ac6 <__addsf3+0x136>
 8000a22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2a:	bf08      	it	eq
 8000a2c:	f020 0001 	biceq.w	r0, r0, #1
 8000a30:	ea40 0003 	orr.w	r0, r0, r3
 8000a34:	4770      	bx	lr
 8000a36:	0049      	lsls	r1, r1, #1
 8000a38:	eb40 0000 	adc.w	r0, r0, r0
 8000a3c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	d1ed      	bne.n	8000a22 <__addsf3+0x92>
 8000a46:	fab0 fc80 	clz	ip, r0
 8000a4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a56:	bfaa      	itet	ge
 8000a58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a5c:	4252      	neglt	r2, r2
 8000a5e:	4318      	orrge	r0, r3
 8000a60:	bfbc      	itt	lt
 8000a62:	40d0      	lsrlt	r0, r2
 8000a64:	4318      	orrlt	r0, r3
 8000a66:	4770      	bx	lr
 8000a68:	f092 0f00 	teq	r2, #0
 8000a6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a70:	bf06      	itte	eq
 8000a72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a76:	3201      	addeq	r2, #1
 8000a78:	3b01      	subne	r3, #1
 8000a7a:	e7b5      	b.n	80009e8 <__addsf3+0x58>
 8000a7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8a:	d021      	beq.n	8000ad0 <__addsf3+0x140>
 8000a8c:	ea92 0f03 	teq	r2, r3
 8000a90:	d004      	beq.n	8000a9c <__addsf3+0x10c>
 8000a92:	f092 0f00 	teq	r2, #0
 8000a96:	bf08      	it	eq
 8000a98:	4608      	moveq	r0, r1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea90 0f01 	teq	r0, r1
 8000aa0:	bf1c      	itt	ne
 8000aa2:	2000      	movne	r0, #0
 8000aa4:	4770      	bxne	lr
 8000aa6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aaa:	d104      	bne.n	8000ab6 <__addsf3+0x126>
 8000aac:	0040      	lsls	r0, r0, #1
 8000aae:	bf28      	it	cs
 8000ab0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000aba:	bf3c      	itt	cc
 8000abc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bxcc	lr
 8000ac2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	4770      	bx	lr
 8000ad0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad4:	bf16      	itet	ne
 8000ad6:	4608      	movne	r0, r1
 8000ad8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000adc:	4601      	movne	r1, r0
 8000ade:	0242      	lsls	r2, r0, #9
 8000ae0:	bf06      	itte	eq
 8000ae2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ae6:	ea90 0f01 	teqeq	r0, r1
 8000aea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_ui2f>:
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e004      	b.n	8000b00 <__aeabi_i2f+0x8>
 8000af6:	bf00      	nop

08000af8 <__aeabi_i2f>:
 8000af8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000afc:	bf48      	it	mi
 8000afe:	4240      	negmi	r0, r0
 8000b00:	ea5f 0c00 	movs.w	ip, r0
 8000b04:	bf08      	it	eq
 8000b06:	4770      	bxeq	lr
 8000b08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	e01c      	b.n	8000b4e <__aeabi_l2f+0x2a>

08000b14 <__aeabi_ul2f>:
 8000b14:	ea50 0201 	orrs.w	r2, r0, r1
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e00a      	b.n	8000b38 <__aeabi_l2f+0x14>
 8000b22:	bf00      	nop

08000b24 <__aeabi_l2f>:
 8000b24:	ea50 0201 	orrs.w	r2, r0, r1
 8000b28:	bf08      	it	eq
 8000b2a:	4770      	bxeq	lr
 8000b2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__aeabi_l2f+0x14>
 8000b32:	4240      	negs	r0, r0
 8000b34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b38:	ea5f 0c01 	movs.w	ip, r1
 8000b3c:	bf02      	ittt	eq
 8000b3e:	4684      	moveq	ip, r0
 8000b40:	4601      	moveq	r1, r0
 8000b42:	2000      	moveq	r0, #0
 8000b44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b48:	bf08      	it	eq
 8000b4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b52:	fabc f28c 	clz	r2, ip
 8000b56:	3a08      	subs	r2, #8
 8000b58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b5c:	db10      	blt.n	8000b80 <__aeabi_l2f+0x5c>
 8000b5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b62:	4463      	add	r3, ip
 8000b64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b68:	f1c2 0220 	rsb	r2, r2, #32
 8000b6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b70:	fa20 f202 	lsr.w	r2, r0, r2
 8000b74:	eb43 0002 	adc.w	r0, r3, r2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f102 0220 	add.w	r2, r2, #32
 8000b84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b90:	fa21 f202 	lsr.w	r2, r1, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_fmul>:
 8000ba0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ba8:	bf1e      	ittt	ne
 8000baa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bae:	ea92 0f0c 	teqne	r2, ip
 8000bb2:	ea93 0f0c 	teqne	r3, ip
 8000bb6:	d06f      	beq.n	8000c98 <__aeabi_fmul+0xf8>
 8000bb8:	441a      	add	r2, r3
 8000bba:	ea80 0c01 	eor.w	ip, r0, r1
 8000bbe:	0240      	lsls	r0, r0, #9
 8000bc0:	bf18      	it	ne
 8000bc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bc6:	d01e      	beq.n	8000c06 <__aeabi_fmul+0x66>
 8000bc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bcc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd4:	fba0 3101 	umull	r3, r1, r0, r1
 8000bd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bdc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be0:	bf3e      	ittt	cc
 8000be2:	0049      	lslcc	r1, r1, #1
 8000be4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000be8:	005b      	lslcc	r3, r3, #1
 8000bea:	ea40 0001 	orr.w	r0, r0, r1
 8000bee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf2:	2afd      	cmp	r2, #253	; 0xfd
 8000bf4:	d81d      	bhi.n	8000c32 <__aeabi_fmul+0x92>
 8000bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	4770      	bx	lr
 8000c06:	f090 0f00 	teq	r0, #0
 8000c0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c0e:	bf08      	it	eq
 8000c10:	0249      	lsleq	r1, r1, #9
 8000c12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1a:	3a7f      	subs	r2, #127	; 0x7f
 8000c1c:	bfc2      	ittt	gt
 8000c1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c26:	4770      	bxgt	lr
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	3a01      	subs	r2, #1
 8000c32:	dc5d      	bgt.n	8000cf0 <__aeabi_fmul+0x150>
 8000c34:	f112 0f19 	cmn.w	r2, #25
 8000c38:	bfdc      	itt	le
 8000c3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c3e:	4770      	bxle	lr
 8000c40:	f1c2 0200 	rsb	r2, r2, #0
 8000c44:	0041      	lsls	r1, r0, #1
 8000c46:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4a:	f1c2 0220 	rsb	r2, r2, #32
 8000c4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c52:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c56:	f140 0000 	adc.w	r0, r0, #0
 8000c5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c5e:	bf08      	it	eq
 8000c60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c64:	4770      	bx	lr
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c6e:	bf02      	ittt	eq
 8000c70:	0040      	lsleq	r0, r0, #1
 8000c72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c76:	3a01      	subeq	r2, #1
 8000c78:	d0f9      	beq.n	8000c6e <__aeabi_fmul+0xce>
 8000c7a:	ea40 000c 	orr.w	r0, r0, ip
 8000c7e:	f093 0f00 	teq	r3, #0
 8000c82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0049      	lsleq	r1, r1, #1
 8000c8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c8e:	3b01      	subeq	r3, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xe6>
 8000c92:	ea41 010c 	orr.w	r1, r1, ip
 8000c96:	e78f      	b.n	8000bb8 <__aeabi_fmul+0x18>
 8000c98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	bf18      	it	ne
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d00a      	beq.n	8000cbe <__aeabi_fmul+0x11e>
 8000ca8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cac:	bf18      	it	ne
 8000cae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb2:	d1d8      	bne.n	8000c66 <__aeabi_fmul+0xc6>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	4770      	bx	lr
 8000cbe:	f090 0f00 	teq	r0, #0
 8000cc2:	bf17      	itett	ne
 8000cc4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	f091 0f00 	teqne	r1, #0
 8000cce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd2:	d014      	beq.n	8000cfe <__aeabi_fmul+0x15e>
 8000cd4:	ea92 0f0c 	teq	r2, ip
 8000cd8:	d101      	bne.n	8000cde <__aeabi_fmul+0x13e>
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	d10f      	bne.n	8000cfe <__aeabi_fmul+0x15e>
 8000cde:	ea93 0f0c 	teq	r3, ip
 8000ce2:	d103      	bne.n	8000cec <__aeabi_fmul+0x14c>
 8000ce4:	024b      	lsls	r3, r1, #9
 8000ce6:	bf18      	it	ne
 8000ce8:	4608      	movne	r0, r1
 8000cea:	d108      	bne.n	8000cfe <__aeabi_fmul+0x15e>
 8000cec:	ea80 0001 	eor.w	r0, r0, r1
 8000cf0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfc:	4770      	bx	lr
 8000cfe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fdiv>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d069      	beq.n	8000df4 <__aeabi_fdiv+0xec>
 8000d20:	eba2 0203 	sub.w	r2, r2, r3
 8000d24:	ea80 0c01 	eor.w	ip, r0, r1
 8000d28:	0249      	lsls	r1, r1, #9
 8000d2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d2e:	d037      	beq.n	8000da0 <__aeabi_fdiv+0x98>
 8000d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d40:	428b      	cmp	r3, r1
 8000d42:	bf38      	it	cc
 8000d44:	005b      	lslcc	r3, r3, #1
 8000d46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	bf24      	itt	cs
 8000d52:	1a5b      	subcs	r3, r3, r1
 8000d54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d5c:	bf24      	itt	cs
 8000d5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6a:	bf24      	itt	cs
 8000d6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d78:	bf24      	itt	cs
 8000d7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8a:	d1e0      	bne.n	8000d4e <__aeabi_fdiv+0x46>
 8000d8c:	2afd      	cmp	r2, #253	; 0xfd
 8000d8e:	f63f af50 	bhi.w	8000c32 <__aeabi_fmul+0x92>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d98:	bf08      	it	eq
 8000d9a:	f020 0001 	biceq.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da8:	327f      	adds	r2, #127	; 0x7f
 8000daa:	bfc2      	ittt	gt
 8000dac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db4:	4770      	bxgt	lr
 8000db6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	e737      	b.n	8000c32 <__aeabi_fmul+0x92>
 8000dc2:	f092 0f00 	teq	r2, #0
 8000dc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0040      	lsleq	r0, r0, #1
 8000dce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd2:	3a01      	subeq	r2, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fdiv+0xc2>
 8000dd6:	ea40 000c 	orr.w	r0, r0, ip
 8000dda:	f093 0f00 	teq	r3, #0
 8000dde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0049      	lsleq	r1, r1, #1
 8000de6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dea:	3b01      	subeq	r3, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xda>
 8000dee:	ea41 010c 	orr.w	r1, r1, ip
 8000df2:	e795      	b.n	8000d20 <__aeabi_fdiv+0x18>
 8000df4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d108      	bne.n	8000e10 <__aeabi_fdiv+0x108>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	f47f af7d 	bne.w	8000cfe <__aeabi_fmul+0x15e>
 8000e04:	ea93 0f0c 	teq	r3, ip
 8000e08:	f47f af70 	bne.w	8000cec <__aeabi_fmul+0x14c>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e776      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e10:	ea93 0f0c 	teq	r3, ip
 8000e14:	d104      	bne.n	8000e20 <__aeabi_fdiv+0x118>
 8000e16:	024b      	lsls	r3, r1, #9
 8000e18:	f43f af4c 	beq.w	8000cb4 <__aeabi_fmul+0x114>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e76e      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1ca      	bne.n	8000dc2 <__aeabi_fdiv+0xba>
 8000e2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e30:	f47f af5c 	bne.w	8000cec <__aeabi_fmul+0x14c>
 8000e34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e38:	f47f af3c 	bne.w	8000cb4 <__aeabi_fmul+0x114>
 8000e3c:	e75f      	b.n	8000cfe <__aeabi_fmul+0x15e>
 8000e3e:	bf00      	nop

08000e40 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 ffa6 	bl	8004da0 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /**Common config 
  */
  hadc1.Instance = ADC1;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e60:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <MX_ADC1_Init+0xb8>)
 8000e62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e78:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8a:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e8c:	f000 fcbe 	bl	800180c <HAL_ADC_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 8000e96:	f000 fa98 	bl	80013ca <Error_Handler>
  }
  /**Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedOffset = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000eb6:	f107 0310 	add.w	r3, r7, #16
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000ebe:	f001 f8cd 	bl	800205c <HAL_ADCEx_InjectedConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f000 fa7f 	bl	80013ca <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_ADC1_Init+0xb4>)
 8000ede:	f000 ff2f 	bl	8001d40 <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ee8:	f000 fa6f 	bl	80013ca <Error_Handler>
  }

}
 8000eec:	bf00      	nop
 8000eee:	3730      	adds	r7, #48	; 0x30
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000002c 	.word	0x2000002c
 8000ef8:	40012400 	.word	0x40012400

08000efc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_ADC_MspInit+0x7c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d129      	bne.n	8000f70 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_ADC_MspInit+0x80>)
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_ADC_MspInit+0x80>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_ADC_MspInit+0x80>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <HAL_ADC_MspInit+0x80>)
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_ADC_MspInit+0x80>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_ADC_MspInit+0x80>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	2303      	movs	r3, #3
 8000f52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4809      	ldr	r0, [pc, #36]	; (8000f80 <HAL_ADC_MspInit+0x84>)
 8000f5c:	f001 fd04 	bl	8002968 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2012      	movs	r0, #18
 8000f66:	f001 fae0 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f6a:	2012      	movs	r0, #18
 8000f6c:	f001 faf9 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40012400 	.word	0x40012400
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010800 	.word	0x40010800

08000f84 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <MX_DMA_Init+0x48>)
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_DMA_Init+0x48>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6153      	str	r3, [r2, #20]
 8000f96:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_DMA_Init+0x48>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2010      	movs	r0, #16
 8000fa8:	f001 fabf 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fac:	2010      	movs	r0, #16
 8000fae:	f001 fad8 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2011      	movs	r0, #17
 8000fb8:	f001 fab7 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000fbc:	2011      	movs	r0, #17
 8000fbe:	f001 fad0 	bl	8002562 <HAL_NVIC_EnableIRQ>

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <MX_GPIO_Init+0x90>)
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_GPIO_Init+0x90>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_GPIO_Init+0x90>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_GPIO_Init+0x90>)
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_GPIO_Init+0x90>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_GPIO_Init+0x90>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_GPIO_Init+0x90>)
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_GPIO_Init+0x90>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_GPIO_Init+0x90>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_GPIO_Init+0x94>)
 8001034:	f001 fdee 	bl	8002c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 8001038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2302      	movs	r3, #2
 8001048:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_GPIO_Init+0x94>)
 8001052:	f001 fc89 	bl	8002968 <HAL_GPIO_Init>

}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40010800 	.word	0x40010800

08001068 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x50>)
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <MX_I2C1_Init+0x54>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x58>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_I2C1_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 15>>1;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001080:	2207      	movs	r2, #7
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800108a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_I2C1_Init+0x50>)
 80010a6:	f001 fddf 	bl	8002c68 <HAL_I2C_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b0:	f000 f98b 	bl	80013ca <Error_Handler>
  }

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000a0 	.word	0x200000a0
 80010bc:	40005400 	.word	0x40005400
 80010c0:	000186a0 	.word	0x000186a0

080010c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a46      	ldr	r2, [pc, #280]	; (80011f8 <HAL_I2C_MspInit+0x134>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	f040 8084 	bne.w	80011ee <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4a45      	ldr	r2, [pc, #276]	; (80011fc <HAL_I2C_MspInit+0x138>)
 80010e8:	4b44      	ldr	r3, [pc, #272]	; (80011fc <HAL_I2C_MspInit+0x138>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	6193      	str	r3, [r2, #24]
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <HAL_I2C_MspInit+0x138>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fe:	23c0      	movs	r3, #192	; 0xc0
 8001100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001102:	2312      	movs	r3, #18
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	483a      	ldr	r0, [pc, #232]	; (8001200 <HAL_I2C_MspInit+0x13c>)
 8001116:	f001 fc27 	bl	8002968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111a:	4a38      	ldr	r2, [pc, #224]	; (80011fc <HAL_I2C_MspInit+0x138>)
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <HAL_I2C_MspInit+0x138>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b35      	ldr	r3, [pc, #212]	; (80011fc <HAL_I2C_MspInit+0x138>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_I2C_MspInit+0x140>)
 8001134:	4a34      	ldr	r2, [pc, #208]	; (8001208 <HAL_I2C_MspInit+0x144>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_I2C_MspInit+0x140>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_I2C_MspInit+0x140>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <HAL_I2C_MspInit+0x140>)
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_I2C_MspInit+0x140>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <HAL_I2C_MspInit+0x140>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_I2C_MspInit+0x140>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <HAL_I2C_MspInit+0x140>)
 800115e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001162:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001164:	4827      	ldr	r0, [pc, #156]	; (8001204 <HAL_I2C_MspInit+0x140>)
 8001166:	f001 fa17 	bl	8002598 <HAL_DMA_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_I2C_MspInit+0xb0>
    {
      Error_Handler();
 8001170:	f000 f92b 	bl	80013ca <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_I2C_MspInit+0x140>)
 8001178:	639a      	str	r2, [r3, #56]	; 0x38
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_I2C_MspInit+0x140>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_I2C_MspInit+0x148>)
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <HAL_I2C_MspInit+0x14c>)
 8001184:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_I2C_MspInit+0x148>)
 8001188:	2210      	movs	r2, #16
 800118a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_I2C_MspInit+0x148>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_I2C_MspInit+0x148>)
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_I2C_MspInit+0x148>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_I2C_MspInit+0x148>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_I2C_MspInit+0x148>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_I2C_MspInit+0x148>)
 80011ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80011b2:	4816      	ldr	r0, [pc, #88]	; (800120c <HAL_I2C_MspInit+0x148>)
 80011b4:	f001 f9f0 	bl	8002598 <HAL_DMA_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 80011be:	f000 f904 	bl	80013ca <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <HAL_I2C_MspInit+0x148>)
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
 80011c8:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_I2C_MspInit+0x148>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	201f      	movs	r0, #31
 80011d4:	f001 f9a9 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011d8:	201f      	movs	r0, #31
 80011da:	f001 f9c2 	bl	8002562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2020      	movs	r0, #32
 80011e4:	f001 f9a1 	bl	800252a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011e8:	2020      	movs	r0, #32
 80011ea:	f001 f9ba 	bl	8002562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40005400 	.word	0x40005400
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010c00 	.word	0x40010c00
 8001204:	200000f4 	.word	0x200000f4
 8001208:	40020080 	.word	0x40020080
 800120c:	2000005c 	.word	0x2000005c
 8001210:	4002006c 	.word	0x4002006c

08001214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121a:	f000 fa95 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121e:	f000 f879 	bl	8001314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001222:	f7ff fed5 	bl	8000fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001226:	f7ff fead 	bl	8000f84 <MX_DMA_Init>
  MX_ADC1_Init();
 800122a:	f7ff fe09 	bl	8000e40 <MX_ADC1_Init>
  MX_I2C1_Init();
 800122e:	f7ff ff1b 	bl	8001068 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t prevTick = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  uint32_t adcPrevTick = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  uint32_t i2cPrevTick = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]

  HAL_ADC_Start_IT(&hadc1);
 800123e:	482d      	ldr	r0, [pc, #180]	; (80012f4 <main+0xe0>)
 8001240:	f000 fbbc 	bl	80019bc <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - prevTick >= LED_DELAY) {
 8001244:	f000 fad8 	bl	80017f8 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001252:	d307      	bcc.n	8001264 <main+0x50>
		  HAL_GPIO_TogglePin(Debug_LED_GPIO_Port, Debug_LED_Pin);
 8001254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001258:	4827      	ldr	r0, [pc, #156]	; (80012f8 <main+0xe4>)
 800125a:	f001 fcf3 	bl	8002c44 <HAL_GPIO_TogglePin>
		  prevTick = HAL_GetTick();
 800125e:	f000 facb 	bl	80017f8 <HAL_GetTick>
 8001262:	60f8      	str	r0, [r7, #12]
	  }

	  if(adcData.conversions == ADC_RESULTS_NUMBER+1 && HAL_GetTick() - adcPrevTick >= ADC_DELAY) {
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <main+0xe8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b0b      	cmp	r3, #11
 800126a:	d113      	bne.n	8001294 <main+0x80>
 800126c:	f000 fac4 	bl	80017f8 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b09      	cmp	r3, #9
 8001278:	d90c      	bls.n	8001294 <main+0x80>
		  clearArrayUint32(adcData.results, ADC_RESULTS_NUMBER);
 800127a:	210a      	movs	r1, #10
 800127c:	4820      	ldr	r0, [pc, #128]	; (8001300 <main+0xec>)
 800127e:	f000 f9df 	bl	8001640 <clearArrayUint32>
		  adcData.conversions = 0;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <main+0xe8>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
		  adcPrevTick = HAL_GetTick();
 8001288:	f000 fab6 	bl	80017f8 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
		  HAL_ADC_Start_IT(&hadc1);
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <main+0xe0>)
 8001290:	f000 fb94 	bl	80019bc <HAL_ADC_Start_IT>
	  }

	  if(transitionDone) {
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <main+0xf0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00e      	beq.n	80012ba <main+0xa6>
		  transitionDone = 0;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <main+0xf0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		  Uint8FromFloat(adcData.average, dataToSend);
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <main+0xe8>)
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	4918      	ldr	r1, [pc, #96]	; (8001308 <main+0xf4>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f9e4 	bl	8001676 <Uint8FromFloat>
		  HAL_I2C_Slave_Transmit_IT(&hi2c1, dataToSend, 4);
 80012ae:	2204      	movs	r2, #4
 80012b0:	4915      	ldr	r1, [pc, #84]	; (8001308 <main+0xf4>)
 80012b2:	4816      	ldr	r0, [pc, #88]	; (800130c <main+0xf8>)
 80012b4:	f001 fddc 	bl	8002e70 <HAL_I2C_Slave_Transmit_IT>
 80012b8:	e7c4      	b.n	8001244 <main+0x30>
	  }
	  else {
		  if(HAL_GetTick() - i2cPrevTick >= TRANSITION_TIMEOUT && firsttime) {
 80012ba:	f000 fa9d 	bl	80017f8 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b63      	cmp	r3, #99	; 0x63
 80012c6:	d9bd      	bls.n	8001244 <main+0x30>
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <main+0xfc>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0b9      	beq.n	8001244 <main+0x30>
			  HAL_I2C_Init(&hi2c1);
 80012d0:	480e      	ldr	r0, [pc, #56]	; (800130c <main+0xf8>)
 80012d2:	f001 fcc9 	bl	8002c68 <HAL_I2C_Init>
			  i2cPrevTick = HAL_GetTick();
 80012d6:	f000 fa8f 	bl	80017f8 <HAL_GetTick>
 80012da:	6078      	str	r0, [r7, #4]
			  Uint8FromFloat(adcData.average, dataToSend);
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <main+0xe8>)
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	4909      	ldr	r1, [pc, #36]	; (8001308 <main+0xf4>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f9c7 	bl	8001676 <Uint8FromFloat>
			  HAL_I2C_Slave_Transmit_IT(&hi2c1, dataToSend, 4);
 80012e8:	2204      	movs	r2, #4
 80012ea:	4907      	ldr	r1, [pc, #28]	; (8001308 <main+0xf4>)
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <main+0xf8>)
 80012ee:	f001 fdbf 	bl	8002e70 <HAL_I2C_Slave_Transmit_IT>
	  if(HAL_GetTick() - prevTick >= LED_DELAY) {
 80012f2:	e7a7      	b.n	8001244 <main+0x30>
 80012f4:	2000002c 	.word	0x2000002c
 80012f8:	40010800 	.word	0x40010800
 80012fc:	2000013c 	.word	0x2000013c
 8001300:	20000140 	.word	0x20000140
 8001304:	20000029 	.word	0x20000029
 8001308:	20000138 	.word	0x20000138
 800130c:	200000a0 	.word	0x200000a0
 8001310:	20000028 	.word	0x20000028

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b094      	sub	sp, #80	; 0x50
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131e:	2228      	movs	r2, #40	; 0x28
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fd3c 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001344:	2301      	movs	r3, #1
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001352:	2301      	movs	r3, #1
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001356:	2302      	movs	r3, #2
 8001358:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001360:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001364:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136a:	4618      	mov	r0, r3
 800136c:	f003 f830 	bl	80043d0 <HAL_RCC_OscConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001376:	f000 f828 	bl	80013ca <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2102      	movs	r1, #2
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fa7e 	bl	8004898 <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013a2:	f000 f812 	bl	80013ca <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013a6:	2302      	movs	r3, #2
 80013a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fc1a 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013be:	f000 f804 	bl	80013ca <Error_Handler>
  }
}
 80013c2:	bf00      	nop
 80013c4:	3750      	adds	r7, #80	; 0x50
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80013ce:	e7fe      	b.n	80013ce <Error_Handler+0x4>

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_MspInit+0x5c>)
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_MspInit+0x5c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_MspInit+0x5c>)
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_MspInit+0x5c>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_MspInit+0x60>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_MspInit+0x60>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <HardFault_Handler+0x4>

08001446 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <BusFault_Handler+0x4>

08001452 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <UsageFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f9a8 	bl	80017d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <DMA1_Channel6_IRQHandler+0x10>)
 800148e:	f001 f959 	bl	8002744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000005c 	.word	0x2000005c

0800149c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <DMA1_Channel7_IRQHandler+0x10>)
 80014a2:	f001 f94f 	bl	8002744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000f4 	.word	0x200000f4

080014b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <ADC1_2_IRQHandler+0x10>)
 80014b6:	f000 fb77 	bl	8001ba8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000002c 	.word	0x2000002c

080014c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <I2C1_EV_IRQHandler+0x10>)
 80014ca:	f001 fd6b 	bl	8002fa4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200000a0 	.word	0x200000a0

080014d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <I2C1_ER_IRQHandler+0x10>)
 80014de:	f001 fe65 	bl	80031ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000a0 	.word	0x200000a0
 80014ec:	00000000 	.word	0x00000000

080014f0 <HAL_ADC_ConvCpltCallback>:
uint8_t input_data = 0;
uint8_t firsttime = 0;
uint8_t transitionDone = 0;

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef *hadc)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc1);
 80014f8:	483b      	ldr	r0, [pc, #236]	; (80015e8 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014fa:	f000 fb15 	bl	8001b28 <HAL_ADC_Stop_IT>
	adcData.results[adcData.conversions] = HAL_ADC_GetValue(&hadc1);
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461c      	mov	r4, r3
 8001504:	4838      	ldr	r0, [pc, #224]	; (80015e8 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001506:	f000 fb43 	bl	8001b90 <HAL_ADC_GetValue>
 800150a:	4601      	mov	r1, r0
 800150c:	4a37      	ldr	r2, [pc, #220]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 800150e:	00a3      	lsls	r3, r4, #2
 8001510:	4413      	add	r3, r2
 8001512:	6059      	str	r1, [r3, #4]
	adcData.conversions++;
 8001514:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 800151e:	701a      	strb	r2, [r3, #0]

	if(adcData.conversions == ADC_RESULTS_NUMBER) {
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b0a      	cmp	r3, #10
 8001526:	d14a      	bne.n	80015be <HAL_ADC_ConvCpltCallback+0xce>
		float temp = 0;
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
		for(uint8_t i=0; i<ADC_RESULTS_NUMBER; i++) {
 800152e:	2300      	movs	r3, #0
 8001530:	72fb      	strb	r3, [r7, #11]
 8001532:	e032      	b.n	800159a <HAL_ADC_ConvCpltCallback+0xaa>
			temp = temp + ((float) (adcData.results[i]) / 4096 * 3.3);
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7fe ff6f 	bl	8000418 <__aeabi_f2d>
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	4a2a      	ldr	r2, [pc, #168]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fad1 	bl	8000af0 <__aeabi_ui2f>
 800154e:	4603      	mov	r3, r0
 8001550:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fbd7 	bl	8000d08 <__aeabi_fdiv>
 800155a:	4603      	mov	r3, r0
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ff5b 	bl	8000418 <__aeabi_f2d>
 8001562:	a31f      	add	r3, pc, #124	; (adr r3, 80015e0 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7fe ffaa 	bl	80004c0 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe fdf2 	bl	800015c <__adddf3>
 8001578:	4603      	mov	r3, r0
 800157a:	460c      	mov	r4, r1
 800157c:	4618      	mov	r0, r3
 800157e:	4621      	mov	r1, r4
 8001580:	f7ff f9b0 	bl	80008e4 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]
			adcData.results[i] = 0;
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
		for(uint8_t i=0; i<ADC_RESULTS_NUMBER; i++) {
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	3301      	adds	r3, #1
 8001598:	72fb      	strb	r3, [r7, #11]
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	2b09      	cmp	r3, #9
 800159e:	d9c9      	bls.n	8001534 <HAL_ADC_ConvCpltCallback+0x44>
		}
		adcData.average = temp / ADC_RESULTS_NUMBER;
 80015a0:	4913      	ldr	r1, [pc, #76]	; (80015f0 <HAL_ADC_ConvCpltCallback+0x100>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff fbb0 	bl	8000d08 <__aeabi_fdiv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
		adcData.conversions++;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_ADC_ConvCpltCallback+0xfc>)
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	e002      	b.n	80015c4 <HAL_ADC_ConvCpltCallback+0xd4>
	}
	else {
		HAL_ADC_Start_IT(&hadc1);
 80015be:	480a      	ldr	r0, [pc, #40]	; (80015e8 <HAL_ADC_ConvCpltCallback+0xf8>)
 80015c0:	f000 f9fc 	bl	80019bc <HAL_ADC_Start_IT>
	}

	if(!firsttime) {
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_ADC_ConvCpltCallback+0x104>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <HAL_ADC_ConvCpltCallback+0xe2>
		firsttime = 1;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_ADC_ConvCpltCallback+0x104>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
	}
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdb0      	pop	{r4, r5, r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	66666666 	.word	0x66666666
 80015e4:	400a6666 	.word	0x400a6666
 80015e8:	2000002c 	.word	0x2000002c
 80015ec:	2000013c 	.word	0x2000013c
 80015f0:	41200000 	.word	0x41200000
 80015f4:	20000028 	.word	0x20000028

080015f8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	transitionDone = 1;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_I2C_SlaveTxCpltCallback+0x18>)
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	20000029 	.word	0x20000029

08001614 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback (I2C_HandleTypeDef * hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	70fb      	strb	r3, [r7, #3]
 8001632:	4613      	mov	r3, r2
 8001634:	803b      	strh	r3, [r7, #0]

}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <clearArrayUint32>:


void clearArrayUint32(uint32_t* target, uint16_t size)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<size; i++) {
 800164c:	2300      	movs	r3, #0
 800164e:	81fb      	strh	r3, [r7, #14]
 8001650:	e008      	b.n	8001664 <clearArrayUint32+0x24>
		target[i] = 0;
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0; i<size; i++) {
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	3301      	adds	r3, #1
 8001662:	81fb      	strh	r3, [r7, #14]
 8001664:	89fa      	ldrh	r2, [r7, #14]
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3f2      	bcc.n	8001652 <clearArrayUint32+0x12>
	}
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <Uint8FromFloat>:
		target[i] = 0;
	}
}

void Uint8FromFloat(float input, uint8_t *outArray)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
	float *dest = (float*) (outArray);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	60fb      	str	r3, [r7, #12]
	*dest = input;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001694:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001696:	e003      	b.n	80016a0 <LoopCopyDataInit>

08001698 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800169a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800169c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800169e:	3104      	adds	r1, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016a0:	480a      	ldr	r0, [pc, #40]	; (80016cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016a8:	d3f6      	bcc.n	8001698 <CopyDataInit>
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016ac:	e002      	b.n	80016b4 <LoopFillZerobss>

080016ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016b0:	f842 3b04 	str.w	r3, [r2], #4

080016b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016b8:	d3f9      	bcc.n	80016ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ba:	f000 f811 	bl	80016e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f003 fb4b 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c2:	f7ff fda7 	bl	8001214 <main>
  bx lr
 80016c6:	4770      	bx	lr
  ldr r3, =_sidata
 80016c8:	08004dfc 	.word	0x08004dfc
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80016d4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80016d8:	20000170 	.word	0x20000170

080016dc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <CAN1_RX1_IRQHandler>
	...

080016e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016e4:	4a15      	ldr	r2, [pc, #84]	; (800173c <SystemInit+0x5c>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <SystemInit+0x5c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016f0:	4912      	ldr	r1, [pc, #72]	; (800173c <SystemInit+0x5c>)
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <SystemInit+0x5c>)
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <SystemInit+0x60>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <SystemInit+0x5c>)
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <SystemInit+0x5c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <SystemInit+0x5c>)
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <SystemInit+0x5c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001716:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001718:	4a08      	ldr	r2, [pc, #32]	; (800173c <SystemInit+0x5c>)
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <SystemInit+0x5c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001722:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SystemInit+0x5c>)
 8001726:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800172a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SystemInit+0x64>)
 800172e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001732:	609a      	str	r2, [r3, #8]
#endif 
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	f8ff0000 	.word	0xf8ff0000
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_Init+0x28>)
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_Init+0x28>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 fedb 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	2000      	movs	r0, #0
 8001760:	f000 f808 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff fe34 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40022000 	.word	0x40022000

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x54>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x58>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fef3 	bl	800257e <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00e      	b.n	80017c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b0f      	cmp	r3, #15
 80017a6:	d80a      	bhi.n	80017be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b0:	f000 febb 	bl	800252a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <HAL_InitTick+0x5c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	e000      	b.n	80017c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_IncTick+0x1c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_IncTick+0x20>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <HAL_IncTick+0x20>)
 80017e6:	6013      	str	r3, [r2, #0]
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	20000008 	.word	0x20000008
 80017f4:	2000016c 	.word	0x2000016c

080017f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <HAL_GetTick+0x10>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	2000016c 	.word	0x2000016c

0800180c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0be      	b.n	80019ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fb56 	bl	8000efc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 fbbf 	bl	8001fd4 <ADC_ConversionStop_Disable>
 8001856:	4603      	mov	r3, r0
 8001858:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8099 	bne.w	800199a <HAL_ADC_Init+0x18e>
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 8095 	bne.w	800199a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001878:	f023 0302 	bic.w	r3, r3, #2
 800187c:	f043 0202 	orr.w	r2, r3, #2
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800188c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001894:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	4313      	orrs	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a4:	d003      	beq.n	80018ae <HAL_ADC_Init+0xa2>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d102      	bne.n	80018b4 <HAL_ADC_Init+0xa8>
 80018ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b2:	e000      	b.n	80018b6 <HAL_ADC_Init+0xaa>
 80018b4:	2300      	movs	r3, #0
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d119      	bne.n	80018f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	035a      	lsls	r2, r3, #13
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	e00b      	b.n	80018f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	6852      	ldr	r2, [r2, #4]
 8001902:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6899      	ldr	r1, [r3, #8]
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <HAL_ADC_Init+0x1a8>)
 8001918:	400b      	ands	r3, r1
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	430b      	orrs	r3, r1
 800191e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001928:	d003      	beq.n	8001932 <HAL_ADC_Init+0x126>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d104      	bne.n	800193c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	3b01      	subs	r3, #1
 8001938:	051b      	lsls	r3, r3, #20
 800193a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001946:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	430a      	orrs	r2, r1
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_ADC_Init+0x1ac>)
 8001958:	4013      	ands	r3, r2
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	4293      	cmp	r3, r2
 800195e:	d10b      	bne.n	8001978 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001976:	e018      	b.n	80019aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f023 0312 	bic.w	r3, r3, #18
 8001980:	f043 0210 	orr.w	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001998:	e007      	b.n	80019aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	f043 0210 	orr.w	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	ffe1f7fd 	.word	0xffe1f7fd
 80019b8:	ff1f0efe 	.word	0xff1f0efe

080019bc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Start_IT+0x1a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e0a0      	b.n	8001b18 <HAL_ADC_Start_IT+0x15c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 faa6 	bl	8001f30 <ADC_Enable>
 80019e4:	4603      	mov	r3, r0
 80019e6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 808f 	bne.w	8001b0e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a45      	ldr	r2, [pc, #276]	; (8001b20 <HAL_ADC_Start_IT+0x164>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d105      	bne.n	8001a1a <HAL_ADC_Start_IT+0x5e>
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <HAL_ADC_Start_IT+0x168>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d115      	bne.n	8001a46 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d026      	beq.n	8001a82 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a44:	e01d      	b.n	8001a82 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a33      	ldr	r2, [pc, #204]	; (8001b24 <HAL_ADC_Start_IT+0x168>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <HAL_ADC_Start_IT+0xaa>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <HAL_ADC_Start_IT+0x164>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10d      	bne.n	8001a82 <HAL_ADC_Start_IT+0xc6>
 8001a66:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_ADC_Start_IT+0x168>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	f023 0206 	bic.w	r2, r3, #6
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a9a:	e002      	b.n	8001aa2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f06f 0202 	mvn.w	r2, #2
 8001ab2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	6852      	ldr	r2, [r2, #4]
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ace:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ad2:	d113      	bne.n	8001afc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_ADC_Start_IT+0x164>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_ADC_Start_IT+0x168>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d108      	bne.n	8001afc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	6892      	ldr	r2, [r2, #8]
 8001af4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	e00c      	b.n	8001b16 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	6892      	ldr	r2, [r2, #8]
 8001b06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	e003      	b.n	8001b16 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40012800 	.word	0x40012800
 8001b24:	40012400 	.word	0x40012400

08001b28 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Stop_IT+0x1a>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e022      	b.n	8001b88 <HAL_ADC_Stop_IT+0x60>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fa42 	bl	8001fd4 <ADC_ConversionStop_Disable>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d111      	bne.n	8001b7e <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	6852      	ldr	r2, [r2, #4]
 8001b64:	f022 0220 	bic.w	r2, r2, #32
 8001b68:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	d140      	bne.n	8001c40 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d139      	bne.n	8001c40 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bf2:	d11d      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d119      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	6852      	ldr	r2, [r2, #4]
 8001c06:	f022 0220 	bic.w	r2, r2, #32
 8001c0a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fc5d 	bl	80014f0 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f06f 0212 	mvn.w	r2, #18
 8001c3e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b80      	cmp	r3, #128	; 0x80
 8001c4c:	d14f      	bne.n	8001cee <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d148      	bne.n	8001cee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c7e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001c82:	d012      	beq.n	8001caa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d125      	bne.n	8001cde <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001c9c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ca0:	d11d      	bne.n	8001cde <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d119      	bne.n	8001cde <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	6852      	ldr	r2, [r2, #4]
 8001cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f9b2 	bl	8002048 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 020c 	mvn.w	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b40      	cmp	r3, #64	; 0x40
 8001cfa:	d114      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d10d      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f809 	bl	8001d2e <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0201 	mvn.w	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d40:	b490      	push	{r4, r7}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x20>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0dc      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x1da>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b06      	cmp	r3, #6
 8001d6e:	d81c      	bhi.n	8001daa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b05      	subs	r3, #5
 8001d86:	221f      	movs	r2, #31
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4018      	ands	r0, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681c      	ldr	r4, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b05      	subs	r3, #5
 8001da0:	fa04 f303 	lsl.w	r3, r4, r3
 8001da4:	4303      	orrs	r3, r0
 8001da6:	634b      	str	r3, [r1, #52]	; 0x34
 8001da8:	e03c      	b.n	8001e24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d81c      	bhi.n	8001dec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b23      	subs	r3, #35	; 0x23
 8001dc8:	221f      	movs	r2, #31
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	4018      	ands	r0, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681c      	ldr	r4, [r3, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	3b23      	subs	r3, #35	; 0x23
 8001de2:	fa04 f303 	lsl.w	r3, r4, r3
 8001de6:	4303      	orrs	r3, r0
 8001de8:	630b      	str	r3, [r1, #48]	; 0x30
 8001dea:	e01b      	b.n	8001e24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b41      	subs	r3, #65	; 0x41
 8001e02:	221f      	movs	r2, #31
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4018      	ands	r0, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681c      	ldr	r4, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	3b41      	subs	r3, #65	; 0x41
 8001e1c:	fa04 f303 	lsl.w	r3, r4, r3
 8001e20:	4303      	orrs	r3, r0
 8001e22:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d91c      	bls.n	8001e66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68d8      	ldr	r0, [r3, #12]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b1e      	subs	r3, #30
 8001e42:	2207      	movs	r2, #7
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4018      	ands	r0, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689c      	ldr	r4, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b1e      	subs	r3, #30
 8001e5c:	fa04 f303 	lsl.w	r3, r4, r3
 8001e60:	4303      	orrs	r3, r0
 8001e62:	60cb      	str	r3, [r1, #12]
 8001e64:	e019      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6918      	ldr	r0, [r3, #16]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4018      	ands	r0, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689c      	ldr	r4, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	fa04 f303 	lsl.w	r3, r4, r3
 8001e96:	4303      	orrs	r3, r0
 8001e98:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d003      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ea6:	2b11      	cmp	r3, #17
 8001ea8:	d132      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <HAL_ADC_ConfigChannel+0x1e4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d125      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d126      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	6892      	ldr	r2, [r2, #8]
 8001ecc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ed0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d11a      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_ADC_ConfigChannel+0x1e8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <HAL_ADC_ConfigChannel+0x1ec>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0c9a      	lsrs	r2, r3, #18
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x1b2>
 8001efe:	e007      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	f043 0220 	orr.w	r2, r3, #32
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc90      	pop	{r4, r7}
 8001f22:	4770      	bx	lr
 8001f24:	40012400 	.word	0x40012400
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	431bde83 	.word	0x431bde83

08001f30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d039      	beq.n	8001fc2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	6892      	ldr	r2, [r2, #8]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <ADC_Enable+0x9c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <ADC_Enable+0xa0>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f6c:	e002      	b.n	8001f74 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f9      	bne.n	8001f6e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f7a:	f7ff fc3d 	bl	80017f8 <HAL_GetTick>
 8001f7e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f80:	e018      	b.n	8001fb4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f82:	f7ff fc39 	bl	80017f8 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d911      	bls.n	8001fb4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f043 0210 	orr.w	r2, r3, #16
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e007      	b.n	8001fc4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d1df      	bne.n	8001f82 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d127      	bne.n	800203e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	6892      	ldr	r2, [r2, #8]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ffe:	f7ff fbfb 	bl	80017f8 <HAL_GetTick>
 8002002:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002004:	e014      	b.n	8002030 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002006:	f7ff fbf7 	bl	80017f8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d90d      	bls.n	8002030 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f043 0210 	orr.w	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e007      	b.n	8002040 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d0e3      	beq.n	8002006 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800205c:	b4b0      	push	{r4, r5, r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_ADCEx_InjectedConfigChannel+0x20>
 8002078:	2302      	movs	r3, #2
 800207a:	e179      	b.n	8002370 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d119      	bne.n	80020c0 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10c      	bne.n	80020ae <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	0d9b      	lsrs	r3, r3, #22
 80020a0:	059b      	lsls	r3, r3, #22
 80020a2:	6839      	ldr	r1, [r7, #0]
 80020a4:	6809      	ldr	r1, [r1, #0]
 80020a6:	03c9      	lsls	r1, r1, #15
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6393      	str	r3, [r2, #56]	; 0x38
 80020ac:	e04e      	b.n	800214c <HAL_ADCEx_InjectedConfigChannel+0xf0>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	f043 0220 	orr.w	r2, r3, #32
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e045      	b.n	800214c <HAL_ADCEx_InjectedConfigChannel+0xf0>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d829      	bhi.n	8002120 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	1ad2      	subs	r2, r2, r3
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	330f      	adds	r3, #15
 80020e8:	221f      	movs	r2, #31
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4018      	ands	r0, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	051c      	lsls	r4, r3, #20
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681d      	ldr	r5, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	1ad2      	subs	r2, r2, r3
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	330f      	adds	r3, #15
 8002114:	fa05 f303 	lsl.w	r3, r5, r3
 8002118:	4323      	orrs	r3, r4
 800211a:	4303      	orrs	r3, r0
 800211c:	638b      	str	r3, [r1, #56]	; 0x38
 800211e:	e015      	b.n	800214c <HAL_ADCEx_InjectedConfigChannel+0xf0>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	1ad2      	subs	r2, r2, r3
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	330f      	adds	r3, #15
 800213c:	221f      	movs	r2, #31
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002146:	43db      	mvns	r3, r3
 8002148:	4003      	ands	r3, r0
 800214a:	638b      	str	r3, [r1, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d00c      	beq.n	8002174 <HAL_ADCEx_InjectedConfigChannel+0x118>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	69c9      	ldr	r1, [r1, #28]
 8002170:	430b      	orrs	r3, r1
 8002172:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d115      	bne.n	80021a8 <HAL_ADCEx_InjectedConfigChannel+0x14c>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002184:	d108      	bne.n	8002198 <HAL_ADCEx_InjectedConfigChannel+0x13c>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	6852      	ldr	r2, [r2, #4]
 8002190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	e007      	b.n	80021a8 <HAL_ADCEx_InjectedConfigChannel+0x14c>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d114      	bne.n	80021da <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d108      	bne.n	80021ca <HAL_ADCEx_InjectedConfigChannel+0x16e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	6852      	ldr	r2, [r2, #4]
 80021c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	e007      	b.n	80021da <HAL_ADCEx_InjectedConfigChannel+0x17e>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	f043 0220 	orr.w	r2, r3, #32
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b09      	cmp	r3, #9
 80021e0:	d91c      	bls.n	800221c <HAL_ADCEx_InjectedConfigChannel+0x1c0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68d8      	ldr	r0, [r3, #12]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	3b1e      	subs	r3, #30
 80021f8:	2207      	movs	r2, #7
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	4018      	ands	r0, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689c      	ldr	r4, [r3, #8]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	3b1e      	subs	r3, #30
 8002212:	fa04 f303 	lsl.w	r3, r4, r3
 8002216:	4303      	orrs	r3, r0
 8002218:	60cb      	str	r3, [r1, #12]
 800221a:	e019      	b.n	8002250 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6918      	ldr	r0, [r3, #16]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	2207      	movs	r2, #7
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	4018      	ands	r0, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689c      	ldr	r4, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	fa04 f303 	lsl.w	r3, r4, r3
 800224c:	4303      	orrs	r3, r0
 800224e:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b10      	cmp	r3, #16
 8002256:	d003      	beq.n	8002260 <HAL_ADCEx_InjectedConfigChannel+0x204>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800225c:	2b11      	cmp	r3, #17
 800225e:	d107      	bne.n	8002270 <HAL_ADCEx_InjectedConfigChannel+0x214>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	6892      	ldr	r2, [r2, #8]
 800226a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800226e:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d011      	beq.n	800229c <HAL_ADCEx_InjectedConfigChannel+0x240>
 8002278:	2b03      	cmp	r3, #3
 800227a:	d01d      	beq.n	80022b8 <HAL_ADCEx_InjectedConfigChannel+0x25c>
 800227c:	2b01      	cmp	r3, #1
 800227e:	d129      	bne.n	80022d4 <HAL_ADCEx_InjectedConfigChannel+0x278>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800228e:	f023 030f 	bic.w	r3, r3, #15
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	68c9      	ldr	r1, [r1, #12]
 8002296:	430b      	orrs	r3, r1
 8002298:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800229a:	e029      	b.n	80022f0 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022aa:	f023 030f 	bic.w	r3, r3, #15
 80022ae:	6839      	ldr	r1, [r7, #0]
 80022b0:	68c9      	ldr	r1, [r1, #12]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 80022b6:	e01b      	b.n	80022f0 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022c6:	f023 030f 	bic.w	r3, r3, #15
 80022ca:	6839      	ldr	r1, [r7, #0]
 80022cc:	68c9      	ldr	r1, [r1, #12]
 80022ce:	430b      	orrs	r3, r1
 80022d0:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80022d2:	e00d      	b.n	80022f0 <HAL_ADCEx_InjectedConfigChannel+0x294>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80022e2:	f023 030f 	bic.w	r3, r3, #15
 80022e6:	6839      	ldr	r1, [r7, #0]
 80022e8:	68c9      	ldr	r1, [r1, #12]
 80022ea:	430b      	orrs	r3, r1
 80022ec:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80022ee:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d003      	beq.n	8002300 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80022fc:	2b11      	cmp	r3, #17
 80022fe:	d132      	bne.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d125      	bne.n	8002356 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d126      	bne.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	6892      	ldr	r2, [r2, #8]
 8002322:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002326:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b10      	cmp	r3, #16
 800232e:	d11a      	bne.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0x30a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a13      	ldr	r2, [pc, #76]	; (8002384 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9a      	lsrs	r2, r3, #18
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002346:	e002      	b.n	800234e <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          {
            wait_loop_index--;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	3b01      	subs	r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f9      	bne.n	8002348 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
 8002354:	e007      	b.n	8002366 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	f043 0220 	orr.w	r2, r3, #32
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bcb0      	pop	{r4, r5, r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40012400 	.word	0x40012400
 8002380:	20000000 	.word	0x20000000
 8002384:	431bde83 	.word	0x431bde83

08002388 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <NVIC_SetPriorityGrouping+0x44>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a4:	4013      	ands	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <NVIC_SetPriorityGrouping+0x44>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <NVIC_GetPriorityGrouping+0x18>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	f003 0307 	and.w	r3, r3, #7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <NVIC_EnableIRQ+0x2c>)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	79fa      	ldrb	r2, [r7, #7]
 8002400:	f002 021f 	and.w	r2, r2, #31
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100

0800241c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	da0b      	bge.n	8002448 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	490d      	ldr	r1, [pc, #52]	; (8002468 <NVIC_SetPriority+0x4c>)
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	3b04      	subs	r3, #4
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002446:	e009      	b.n	800245c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	4908      	ldr	r1, [pc, #32]	; (800246c <NVIC_SetPriority+0x50>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00
 800246c:	e000e100 	.word	0xe000e100

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	2201      	movs	r2, #1
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	401a      	ands	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b6:	2101      	movs	r1, #1
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	1e59      	subs	r1, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <SysTick_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ee:	210f      	movs	r1, #15
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f4:	f7ff ff92 	bl	800241c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SysTick_Config+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <SysTick_Config+0x40>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff33 	bl	8002388 <NVIC_SetPriorityGrouping>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff48 	bl	80023d0 <NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff92 	bl	8002470 <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff61 	bl	800241c <NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff3b 	bl	80023ec <NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffa2 	bl	80024d0 <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e043      	b.n	8002636 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_DMA_Init+0xa8>)
 80025b6:	4413      	add	r3, r2
 80025b8:	4a22      	ldr	r2, [pc, #136]	; (8002644 <HAL_DMA_Init+0xac>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	009a      	lsls	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_DMA_Init+0xb0>)
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	bffdfff8 	.word	0xbffdfff8
 8002644:	cccccccd 	.word	0xcccccccd
 8002648:	40020000 	.word	0x40020000

0800264c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800265e:	2b02      	cmp	r3, #2
 8002660:	d005      	beq.n	800266e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e057      	b.n	800271e <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	f022 020e 	bic.w	r2, r2, #14
 800267c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800268e:	4a26      	ldr	r2, [pc, #152]	; (8002728 <HAL_DMA_Abort_IT+0xdc>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_DMA_Abort_IT+0xe0>)
 8002698:	4299      	cmp	r1, r3
 800269a:	d02e      	beq.n	80026fa <HAL_DMA_Abort_IT+0xae>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_DMA_Abort_IT+0xe4>)
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d026      	beq.n	80026f6 <HAL_DMA_Abort_IT+0xaa>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_DMA_Abort_IT+0xe8>)
 80026b0:	4299      	cmp	r1, r3
 80026b2:	d01d      	beq.n	80026f0 <HAL_DMA_Abort_IT+0xa4>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_DMA_Abort_IT+0xec>)
 80026bc:	4299      	cmp	r1, r3
 80026be:	d014      	beq.n	80026ea <HAL_DMA_Abort_IT+0x9e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_DMA_Abort_IT+0xf0>)
 80026c8:	4299      	cmp	r1, r3
 80026ca:	d00b      	beq.n	80026e4 <HAL_DMA_Abort_IT+0x98>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_DMA_Abort_IT+0xf4>)
 80026d4:	4299      	cmp	r1, r3
 80026d6:	d102      	bne.n	80026de <HAL_DMA_Abort_IT+0x92>
 80026d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026dc:	e00e      	b.n	80026fc <HAL_DMA_Abort_IT+0xb0>
 80026de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e2:	e00b      	b.n	80026fc <HAL_DMA_Abort_IT+0xb0>
 80026e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e8:	e008      	b.n	80026fc <HAL_DMA_Abort_IT+0xb0>
 80026ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ee:	e005      	b.n	80026fc <HAL_DMA_Abort_IT+0xb0>
 80026f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f4:	e002      	b.n	80026fc <HAL_DMA_Abort_IT+0xb0>
 80026f6:	2310      	movs	r3, #16
 80026f8:	e000      	b.n	80026fc <HAL_DMA_Abort_IT+0xb0>
 80026fa:	2301      	movs	r3, #1
 80026fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
    } 
  }
  return status;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40020000 	.word	0x40020000
 800272c:	40020008 	.word	0x40020008
 8002730:	4002001c 	.word	0x4002001c
 8002734:	40020030 	.word	0x40020030
 8002738:	40020044 	.word	0x40020044
 800273c:	40020058 	.word	0x40020058
 8002740:	4002006c 	.word	0x4002006c

08002744 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2204      	movs	r2, #4
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d055      	beq.n	8002818 <HAL_DMA_IRQHandler+0xd4>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d050      	beq.n	8002818 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d107      	bne.n	8002794 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	f022 0204 	bic.w	r2, r2, #4
 8002792:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002794:	4a6d      	ldr	r2, [pc, #436]	; (800294c <HAL_DMA_IRQHandler+0x208>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4619      	mov	r1, r3
 800279c:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <HAL_DMA_IRQHandler+0x20c>)
 800279e:	4299      	cmp	r1, r3
 80027a0:	d02e      	beq.n	8002800 <HAL_DMA_IRQHandler+0xbc>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4619      	mov	r1, r3
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_DMA_IRQHandler+0x210>)
 80027aa:	4299      	cmp	r1, r3
 80027ac:	d026      	beq.n	80027fc <HAL_DMA_IRQHandler+0xb8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4619      	mov	r1, r3
 80027b4:	4b68      	ldr	r3, [pc, #416]	; (8002958 <HAL_DMA_IRQHandler+0x214>)
 80027b6:	4299      	cmp	r1, r3
 80027b8:	d01d      	beq.n	80027f6 <HAL_DMA_IRQHandler+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4619      	mov	r1, r3
 80027c0:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_DMA_IRQHandler+0x218>)
 80027c2:	4299      	cmp	r1, r3
 80027c4:	d014      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xac>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4b64      	ldr	r3, [pc, #400]	; (8002960 <HAL_DMA_IRQHandler+0x21c>)
 80027ce:	4299      	cmp	r1, r3
 80027d0:	d00b      	beq.n	80027ea <HAL_DMA_IRQHandler+0xa6>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4619      	mov	r1, r3
 80027d8:	4b62      	ldr	r3, [pc, #392]	; (8002964 <HAL_DMA_IRQHandler+0x220>)
 80027da:	4299      	cmp	r1, r3
 80027dc:	d102      	bne.n	80027e4 <HAL_DMA_IRQHandler+0xa0>
 80027de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027e2:	e00e      	b.n	8002802 <HAL_DMA_IRQHandler+0xbe>
 80027e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027e8:	e00b      	b.n	8002802 <HAL_DMA_IRQHandler+0xbe>
 80027ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027ee:	e008      	b.n	8002802 <HAL_DMA_IRQHandler+0xbe>
 80027f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027f4:	e005      	b.n	8002802 <HAL_DMA_IRQHandler+0xbe>
 80027f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027fa:	e002      	b.n	8002802 <HAL_DMA_IRQHandler+0xbe>
 80027fc:	2340      	movs	r3, #64	; 0x40
 80027fe:	e000      	b.n	8002802 <HAL_DMA_IRQHandler+0xbe>
 8002800:	2304      	movs	r3, #4
 8002802:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 809a 	beq.w	8002942 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002816:	e094      	b.n	8002942 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2202      	movs	r2, #2
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05c      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x19e>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d057      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10b      	bne.n	8002858 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	f022 020a 	bic.w	r2, r2, #10
 800284e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002858:	4a3c      	ldr	r2, [pc, #240]	; (800294c <HAL_DMA_IRQHandler+0x208>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_DMA_IRQHandler+0x20c>)
 8002862:	4299      	cmp	r1, r3
 8002864:	d02e      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x180>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	4b39      	ldr	r3, [pc, #228]	; (8002954 <HAL_DMA_IRQHandler+0x210>)
 800286e:	4299      	cmp	r1, r3
 8002870:	d026      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x17c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4b37      	ldr	r3, [pc, #220]	; (8002958 <HAL_DMA_IRQHandler+0x214>)
 800287a:	4299      	cmp	r1, r3
 800287c:	d01d      	beq.n	80028ba <HAL_DMA_IRQHandler+0x176>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4b35      	ldr	r3, [pc, #212]	; (800295c <HAL_DMA_IRQHandler+0x218>)
 8002886:	4299      	cmp	r1, r3
 8002888:	d014      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x170>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	4b33      	ldr	r3, [pc, #204]	; (8002960 <HAL_DMA_IRQHandler+0x21c>)
 8002892:	4299      	cmp	r1, r3
 8002894:	d00b      	beq.n	80028ae <HAL_DMA_IRQHandler+0x16a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	4b31      	ldr	r3, [pc, #196]	; (8002964 <HAL_DMA_IRQHandler+0x220>)
 800289e:	4299      	cmp	r1, r3
 80028a0:	d102      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x164>
 80028a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028a6:	e00e      	b.n	80028c6 <HAL_DMA_IRQHandler+0x182>
 80028a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ac:	e00b      	b.n	80028c6 <HAL_DMA_IRQHandler+0x182>
 80028ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b2:	e008      	b.n	80028c6 <HAL_DMA_IRQHandler+0x182>
 80028b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b8:	e005      	b.n	80028c6 <HAL_DMA_IRQHandler+0x182>
 80028ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028be:	e002      	b.n	80028c6 <HAL_DMA_IRQHandler+0x182>
 80028c0:	2320      	movs	r3, #32
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_IRQHandler+0x182>
 80028c4:	2302      	movs	r3, #2
 80028c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d034      	beq.n	8002942 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028e0:	e02f      	b.n	8002942 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2208      	movs	r2, #8
 80028e8:	409a      	lsls	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d028      	beq.n	8002944 <HAL_DMA_IRQHandler+0x200>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d023      	beq.n	8002944 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	f022 020e 	bic.w	r2, r2, #14
 800290a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4798      	blx	r3
    }
  }
  return;
 8002942:	bf00      	nop
 8002944:	bf00      	nop
}
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40020000 	.word	0x40020000
 8002950:	40020008 	.word	0x40020008
 8002954:	4002001c 	.word	0x4002001c
 8002958:	40020030 	.word	0x40020030
 800295c:	40020044 	.word	0x40020044
 8002960:	40020058 	.word	0x40020058
 8002964:	4002006c 	.word	0x4002006c

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b08b      	sub	sp, #44	; 0x2c
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	e121      	b.n	8002bd0 <HAL_GPIO_Init+0x268>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800298c:	2201      	movs	r2, #1
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f040 8110 	bne.w	8002bca <HAL_GPIO_Init+0x262>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	d034      	beq.n	8002a1c <HAL_GPIO_Init+0xb4>
 80029b2:	2b12      	cmp	r3, #18
 80029b4:	d80d      	bhi.n	80029d2 <HAL_GPIO_Init+0x6a>
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d02b      	beq.n	8002a12 <HAL_GPIO_Init+0xaa>
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d804      	bhi.n	80029c8 <HAL_GPIO_Init+0x60>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d031      	beq.n	8002a26 <HAL_GPIO_Init+0xbe>
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d01c      	beq.n	8002a00 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029c6:	e048      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d043      	beq.n	8002a54 <HAL_GPIO_Init+0xec>
 80029cc:	2b11      	cmp	r3, #17
 80029ce:	d01b      	beq.n	8002a08 <HAL_GPIO_Init+0xa0>
          break;
 80029d0:	e043      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80029d2:	4a84      	ldr	r2, [pc, #528]	; (8002be4 <HAL_GPIO_Init+0x27c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d026      	beq.n	8002a26 <HAL_GPIO_Init+0xbe>
 80029d8:	4a82      	ldr	r2, [pc, #520]	; (8002be4 <HAL_GPIO_Init+0x27c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d806      	bhi.n	80029ec <HAL_GPIO_Init+0x84>
 80029de:	4a82      	ldr	r2, [pc, #520]	; (8002be8 <HAL_GPIO_Init+0x280>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d020      	beq.n	8002a26 <HAL_GPIO_Init+0xbe>
 80029e4:	4a81      	ldr	r2, [pc, #516]	; (8002bec <HAL_GPIO_Init+0x284>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01d      	beq.n	8002a26 <HAL_GPIO_Init+0xbe>
          break;
 80029ea:	e036      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80029ec:	4a80      	ldr	r2, [pc, #512]	; (8002bf0 <HAL_GPIO_Init+0x288>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0xbe>
 80029f2:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_GPIO_Init+0x28c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d016      	beq.n	8002a26 <HAL_GPIO_Init+0xbe>
 80029f8:	4a7f      	ldr	r2, [pc, #508]	; (8002bf8 <HAL_GPIO_Init+0x290>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0xbe>
          break;
 80029fe:	e02c      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	623b      	str	r3, [r7, #32]
          break;
 8002a06:	e028      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	623b      	str	r3, [r7, #32]
          break;
 8002a10:	e023      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	3308      	adds	r3, #8
 8002a18:	623b      	str	r3, [r7, #32]
          break;
 8002a1a:	e01e      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	330c      	adds	r3, #12
 8002a22:	623b      	str	r3, [r7, #32]
          break;
 8002a24:	e019      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	623b      	str	r3, [r7, #32]
          break;
 8002a32:	e012      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	611a      	str	r2, [r3, #16]
          break;
 8002a46:	e008      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a48:	2308      	movs	r3, #8
 8002a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	615a      	str	r2, [r3, #20]
          break;
 8002a52:	e002      	b.n	8002a5a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a54:	2300      	movs	r3, #0
 8002a56:	623b      	str	r3, [r7, #32]
          break;
 8002a58:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2bff      	cmp	r3, #255	; 0xff
 8002a5e:	d801      	bhi.n	8002a64 <HAL_GPIO_Init+0xfc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	e001      	b.n	8002a68 <HAL_GPIO_Init+0x100>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2bff      	cmp	r3, #255	; 0xff
 8002a6e:	d802      	bhi.n	8002a76 <HAL_GPIO_Init+0x10e>
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	e002      	b.n	8002a7c <HAL_GPIO_Init+0x114>
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	3b08      	subs	r3, #8
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	210f      	movs	r1, #15
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	6a39      	ldr	r1, [r7, #32]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	431a      	orrs	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8090 	beq.w	8002bca <HAL_GPIO_Init+0x262>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002aaa:	4a54      	ldr	r2, [pc, #336]	; (8002bfc <HAL_GPIO_Init+0x294>)
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_GPIO_Init+0x294>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6193      	str	r3, [r2, #24]
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_GPIO_Init+0x294>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8002ac2:	4a4f      	ldr	r2, [pc, #316]	; (8002c00 <HAL_GPIO_Init+0x298>)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a46      	ldr	r2, [pc, #280]	; (8002c04 <HAL_GPIO_Init+0x29c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00d      	beq.n	8002b0a <HAL_GPIO_Init+0x1a2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a45      	ldr	r2, [pc, #276]	; (8002c08 <HAL_GPIO_Init+0x2a0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x19e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a44      	ldr	r2, [pc, #272]	; (8002c0c <HAL_GPIO_Init+0x2a4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_GPIO_Init+0x19a>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e004      	b.n	8002b0c <HAL_GPIO_Init+0x1a4>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e002      	b.n	8002b0c <HAL_GPIO_Init+0x1a4>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_GPIO_Init+0x1a4>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	f002 0203 	and.w	r2, r2, #3
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	4093      	lsls	r3, r2
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002b1c:	4938      	ldr	r1, [pc, #224]	; (8002c00 <HAL_GPIO_Init+0x298>)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	3302      	adds	r3, #2
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b36:	4936      	ldr	r1, [pc, #216]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b38:	4b35      	ldr	r3, [pc, #212]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
 8002b42:	e006      	b.n	8002b52 <HAL_GPIO_Init+0x1ea>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b44:	4932      	ldr	r1, [pc, #200]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4013      	ands	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <HAL_GPIO_Init+0x204>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b5e:	492c      	ldr	r1, [pc, #176]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
 8002b6a:	e006      	b.n	8002b7a <HAL_GPIO_Init+0x212>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b6c:	4928      	ldr	r1, [pc, #160]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	4013      	ands	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d006      	beq.n	8002b94 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b86:	4922      	ldr	r1, [pc, #136]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
 8002b92:	e006      	b.n	8002ba2 <HAL_GPIO_Init+0x23a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b94:	491e      	ldr	r1, [pc, #120]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <HAL_GPIO_Init+0x254>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bae:	4918      	ldr	r1, [pc, #96]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60cb      	str	r3, [r1, #12]
 8002bba:	e006      	b.n	8002bca <HAL_GPIO_Init+0x262>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bbc:	4914      	ldr	r1, [pc, #80]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_GPIO_Init+0x2a8>)
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	3301      	adds	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	f67f aeda 	bls.w	800298c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	372c      	adds	r7, #44	; 0x2c
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	10210000 	.word	0x10210000
 8002be8:	10110000 	.word	0x10110000
 8002bec:	10120000 	.word	0x10120000
 8002bf0:	10310000 	.word	0x10310000
 8002bf4:	10320000 	.word	0x10320000
 8002bf8:	10220000 	.word	0x10220000
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40010800 	.word	0x40010800
 8002c08:	40010c00 	.word	0x40010c00
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	40010400 	.word	0x40010400

08002c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
 8002c20:	4613      	mov	r3, r2
 8002c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c24:	787b      	ldrb	r3, [r7, #1]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c30:	e003      	b.n	8002c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	041a      	lsls	r2, r3, #16
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	611a      	str	r2, [r3, #16]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	405a      	eors	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0e7      	b.n	8002e52 <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe fa14 	bl	80010c4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f001 ff68 	bl	8004b88 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a67      	ldr	r2, [pc, #412]	; (8002e5c <HAL_I2C_Init+0x1f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d807      	bhi.n	8002cd4 <HAL_I2C_Init+0x6c>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a66      	ldr	r2, [pc, #408]	; (8002e60 <HAL_I2C_Init+0x1f8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e006      	b.n	8002ce2 <HAL_I2C_Init+0x7a>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4a63      	ldr	r2, [pc, #396]	; (8002e64 <HAL_I2C_Init+0x1fc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	bf94      	ite	ls
 8002cdc:	2301      	movls	r3, #1
 8002cde:	2300      	movhi	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0b3      	b.n	8002e52 <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4a5e      	ldr	r2, [pc, #376]	; (8002e68 <HAL_I2C_Init+0x200>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4955      	ldr	r1, [pc, #340]	; (8002e5c <HAL_I2C_Init+0x1f4>)
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	d802      	bhi.n	8002d12 <HAL_I2C_Init+0xaa>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	e009      	b.n	8002d26 <HAL_I2C_Init+0xbe>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4953      	ldr	r1, [pc, #332]	; (8002e6c <HAL_I2C_Init+0x204>)
 8002d1e:	fba1 1303 	umull	r1, r3, r1, r3
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	3301      	adds	r3, #1
 8002d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a4a      	ldr	r2, [pc, #296]	; (8002e5c <HAL_I2C_Init+0x1f4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d80d      	bhi.n	8002d52 <HAL_I2C_Init+0xea>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1e5a      	subs	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf38      	it	cc
 8002d4e:	2304      	movcc	r3, #4
 8002d50:	e04f      	b.n	8002df2 <HAL_I2C_Init+0x18a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d111      	bne.n	8002d7e <HAL_I2C_Init+0x116>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1e58      	subs	r0, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf0c      	ite	eq
 8002d76:	2301      	moveq	r3, #1
 8002d78:	2300      	movne	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	e012      	b.n	8002da4 <HAL_I2C_Init+0x13c>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1e58      	subs	r0, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009a      	lsls	r2, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Init+0x144>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e022      	b.n	8002df2 <HAL_I2C_Init+0x18a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10e      	bne.n	8002dd2 <HAL_I2C_Init+0x16a>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd0:	e00f      	b.n	8002df2 <HAL_I2C_Init+0x18a>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1e58      	subs	r0, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	69d1      	ldr	r1, [r2, #28]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6a12      	ldr	r2, [r2, #32]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6911      	ldr	r1, [r2, #16]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68d2      	ldr	r2, [r2, #12]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6951      	ldr	r1, [r2, #20]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6992      	ldr	r2, [r2, #24]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	000186a0 	.word	0x000186a0
 8002e60:	001e847f 	.word	0x001e847f
 8002e64:	003d08ff 	.word	0x003d08ff
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	10624dd3 	.word	0x10624dd3

08002e70 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d17e      	bne.n	8002f8c <HAL_I2C_Slave_Transmit_IT+0x11c>
  {
    if((pData == NULL) || (Size == 0U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_I2C_Slave_Transmit_IT+0x2a>
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Slave_Transmit_IT+0x2e>
    {
      return  HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e077      	b.n	8002f8e <HAL_I2C_Slave_Transmit_IT+0x11e>
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8002e9e:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <HAL_I2C_Slave_Transmit_IT+0x128>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	08db      	lsrs	r3, r3, #3
 8002ea4:	4a3d      	ldr	r2, [pc, #244]	; (8002f9c <HAL_I2C_Slave_Transmit_IT+0x12c>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0a1a      	lsrs	r2, r3, #8
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009a      	lsls	r2, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	1e5a      	subs	r2, r3, #1
 8002ebc:	617a      	str	r2, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10c      	bne.n	8002edc <HAL_I2C_Slave_Transmit_IT+0x6c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e058      	b.n	8002f8e <HAL_I2C_Slave_Transmit_IT+0x11e>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d0e6      	beq.n	8002eb8 <HAL_I2C_Slave_Transmit_IT+0x48>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2C_Slave_Transmit_IT+0x88>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e04a      	b.n	8002f8e <HAL_I2C_Slave_Transmit_IT+0x11e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d007      	beq.n	8002f1e <HAL_I2C_Slave_Transmit_IT+0xae>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2221      	movs	r2, #33	; 0x21
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_I2C_Slave_Transmit_IT+0x130>)
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	6852      	ldr	r2, [r2, #4]
 8002f82:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f86:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e000      	b.n	8002f8e <HAL_I2C_Slave_Transmit_IT+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
  }
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	14f8b589 	.word	0x14f8b589
 8002fa0:	ffff0000 	.word	0xffff0000

08002fa4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d002      	beq.n	8002fda <HAL_I2C_EV_IRQHandler+0x36>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d172      	bne.n	80030c0 <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x52>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fc99 	bl	8003926 <I2C_Master_SB>
 8002ff4:	e01a      	b.n	800302c <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4b65      	ldr	r3, [pc, #404]	; (8003190 <HAL_I2C_EV_IRQHandler+0x1ec>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0x6e>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fcf5 	bl	80039fa <I2C_Master_ADD10>
 8003010:	e00c      	b.n	800302c <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4b5f      	ldr	r3, [pc, #380]	; (8003194 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_I2C_EV_IRQHandler+0x88>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fcf7 	bl	8003a1a <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4b5a      	ldr	r3, [pc, #360]	; (8003198 <HAL_I2C_EV_IRQHandler+0x1f4>)
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d022      	beq.n	800307c <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <HAL_I2C_EV_IRQHandler+0x1f8>)
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0xb8>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0xb8>
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4b54      	ldr	r3, [pc, #336]	; (80031a0 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f99a 	bl	800338e <I2C_MasterTransmit_TXE>
 800305a:	e030      	b.n	80030be <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 808f 	beq.w	8003186 <HAL_I2C_EV_IRQHandler+0x1e2>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8089 	beq.w	8003186 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fa7f 	bl	8003578 <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800307a:	e084      	b.n	8003186 <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <HAL_I2C_EV_IRQHandler+0x200>)
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_I2C_EV_IRQHandler+0xfe>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_I2C_EV_IRQHandler+0xfe>
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fae1 	bl	8003662 <I2C_MasterReceive_RXNE>
 80030a0:	e00d      	b.n	80030be <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d06c      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x1e2>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d067      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fb74 	bl	80037a4 <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80030bc:	e063      	b.n	8003186 <HAL_I2C_EV_IRQHandler+0x1e2>
 80030be:	e062      	b.n	8003186 <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_I2C_EV_IRQHandler+0x1f0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0x138>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fec7 	bl	8003e68 <I2C_Slave_ADDR>
 80030da:	e055      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_I2C_EV_IRQHandler+0x204>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_I2C_EV_IRQHandler+0x154>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fee3 	bl	8003ebc <I2C_Slave_STOPF>
 80030f6:	e047      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_I2C_EV_IRQHandler+0x1f4>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_I2C_EV_IRQHandler+0x1f8>)
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <HAL_I2C_EV_IRQHandler+0x184>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <HAL_I2C_EV_IRQHandler+0x184>
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800311a:	4013      	ands	r3, r2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fde7 	bl	8003cf4 <I2C_SlaveTransmit_TXE>
 8003126:	e02f      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d02a      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003138:	2b00      	cmp	r3, #0
 800313a:	d025      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fe16 	bl	8003d6e <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 8003142:	e021      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_I2C_EV_IRQHandler+0x200>)
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <HAL_I2C_EV_IRQHandler+0x1c6>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_I2C_EV_IRQHandler+0x1c6>
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fe22 	bl	8003dac <I2C_SlaveReceive_RXNE>
 8003168:	e00e      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d009      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fe52 	bl	8003e28 <I2C_SlaveReceive_BTF>
}
 8003184:	e000      	b.n	8003188 <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8003186:	bf00      	nop
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00010008 	.word	0x00010008
 8003194:	00010002 	.word	0x00010002
 8003198:	00100004 	.word	0x00100004
 800319c:	00010080 	.word	0x00010080
 80031a0:	00010004 	.word	0x00010004
 80031a4:	00010040 	.word	0x00010040
 80031a8:	00010010 	.word	0x00010010

080031ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_I2C_ER_IRQHandler+0x160>)
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d017      	beq.n	800320e <HAL_I2C_ER_IRQHandler+0x62>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_I2C_ER_IRQHandler+0x62>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031fc:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 3381 	and.w	r3, r3, #66048	; 0x10200
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00f      	beq.n	8003238 <HAL_I2C_ER_IRQHandler+0x8c>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_I2C_ER_IRQHandler+0x8c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0202 	orr.w	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003236:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 3382 	and.w	r3, r3, #66560	; 0x10400
 800323e:	2b00      	cmp	r3, #0
 8003240:	d044      	beq.n	80032cc <HAL_I2C_ER_IRQHandler+0x120>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d03f      	beq.n	80032cc <HAL_I2C_ER_IRQHandler+0x120>
  {
    tmp1 = hi2c->Mode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	b2db      	uxtb	r3, r3
 8003254:	61fb      	str	r3, [r7, #28]
    tmp2 = hi2c->XferCount;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	61bb      	str	r3, [r7, #24]
    tmp3 = hi2c->State;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	617b      	str	r3, [r7, #20]
    tmp4 = hi2c->PreviousState;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	613b      	str	r3, [r7, #16]
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2b20      	cmp	r3, #32
 8003272:	d112      	bne.n	800329a <HAL_I2C_ER_IRQHandler+0xee>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <HAL_I2C_ER_IRQHandler+0xee>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b21      	cmp	r3, #33	; 0x21
 800327e:	d008      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0xe6>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b29      	cmp	r3, #41	; 0x29
 8003284:	d005      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0xe6>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b28      	cmp	r3, #40	; 0x28
 800328a:	d106      	bne.n	800329a <HAL_I2C_ER_IRQHandler+0xee>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b21      	cmp	r3, #33	; 0x21
 8003290:	d103      	bne.n	800329a <HAL_I2C_ER_IRQHandler+0xee>
    {
      I2C_Slave_AF(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fed8 	bl	8004048 <I2C_Slave_AF>
 8003298:	e018      	b.n	80032cc <HAL_I2C_ER_IRQHandler+0x120>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d107      	bne.n	80032c2 <HAL_I2C_ER_IRQHandler+0x116>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c0:	601a      	str	r2, [r3, #0]
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ca:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 3384 	and.w	r3, r3, #67584	; 0x10800
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00f      	beq.n	80032f6 <HAL_I2C_ER_IRQHandler+0x14a>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_I2C_ER_IRQHandler+0x14a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0208 	orr.w	r2, r3, #8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80032f4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_I2C_ER_IRQHandler+0x158>
  {
    I2C_ITError(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 ff14 	bl	800412c <I2C_ITError>
  }
}
 8003304:	bf00      	nop
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	00010100 	.word	0x00010100

08003310 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback can be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d150      	bne.n	800345a <I2C_MasterTransmit_TXE+0xcc>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b21      	cmp	r3, #33	; 0x21
 80033bc:	d14d      	bne.n	800345a <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d01d      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x72>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d01a      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x72>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d0:	d016      	beq.n	8003400 <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	6852      	ldr	r2, [r2, #4]
 80033dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033e0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2211      	movs	r2, #17
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff89 	bl	8003310 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fe:	e0b6      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	6852      	ldr	r2, [r2, #4]
 800340a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800340e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d107      	bne.n	800344a <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff7f 	bl	8003346 <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003448:	e091      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff5c 	bl	8003310 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003458:	e089      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b21      	cmp	r3, #33	; 0x21
 800345e:	d006      	beq.n	800346e <I2C_MasterTransmit_TXE+0xe0>
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	f040 8083 	bne.w	800356e <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b22      	cmp	r3, #34	; 0x22
 800346c:	d17f      	bne.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	6852      	ldr	r2, [r2, #4]
 8003482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	e071      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d15b      	bne.n	800354e <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11d      	bne.n	80034da <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d10b      	bne.n	80034be <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b6:	1c9a      	adds	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	651a      	str	r2, [r3, #80]	; 0x50
 80034bc:	e057      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034c6:	b292      	uxth	r2, r2
 80034c8:	1212      	asrs	r2, r2, #8
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	651a      	str	r2, [r3, #80]	; 0x50
 80034d8:	e049      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10b      	bne.n	80034fa <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	651a      	str	r2, [r3, #80]	; 0x50
 80034f8:	e039      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d135      	bne.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b22      	cmp	r3, #34	; 0x22
 800350c:	d108      	bne.n	8003520 <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e026      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b21      	cmp	r3, #33	; 0x21
 800352a:	d120      	bne.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	1c58      	adds	r0, r3, #1
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	6248      	str	r0, [r1, #36]	; 0x24
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800354c:	e00f      	b.n	800356e <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	1c58      	adds	r0, r3, #1
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	6248      	str	r0, [r1, #36]	; 0x24
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b21      	cmp	r3, #33	; 0x21
 8003590:	d162      	bne.n	8003658 <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c58      	adds	r0, r3, #1
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	6248      	str	r0, [r1, #36]	; 0x24
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035bc:	e04c      	b.n	8003658 <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d01d      	beq.n	8003600 <I2C_MasterTransmit_BTF+0x88>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d01a      	beq.n	8003600 <I2C_MasterTransmit_BTF+0x88>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035d0:	d016      	beq.n	8003600 <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	6852      	ldr	r2, [r2, #4]
 80035dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035e0:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2211      	movs	r2, #17
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff fe89 	bl	8003310 <HAL_I2C_MasterTxCpltCallback>
 80035fe:	e02b      	b.n	8003658 <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	6852      	ldr	r2, [r2, #4]
 800360a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800360e:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361e:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d107      	bne.n	800364a <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fe7f 	bl	8003346 <HAL_I2C_MemTxCpltCallback>
 8003648:	e006      	b.n	8003658 <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fe5c 	bl	8003310 <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b22      	cmp	r3, #34	; 0x22
 8003674:	f040 8091 	bne.w	800379a <I2C_MasterReceive_RXNE+0x138>
  {
    uint32_t tmp = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d911      	bls.n	80036ae <I2C_MasterReceive_RXNE+0x4c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6251      	str	r1, [r2, #36]	; 0x24
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	6912      	ldr	r2, [r2, #16]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036ac:	e075      	b.n	800379a <I2C_MasterReceive_RXNE+0x138>
    }
    else if((tmp == 2U) || (tmp == 3U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d002      	beq.n	80036ba <I2C_MasterReceive_RXNE+0x58>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d125      	bne.n	8003706 <I2C_MasterReceive_RXNE+0xa4>
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d010      	beq.n	80036e4 <I2C_MasterReceive_RXNE+0x82>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d0:	601a      	str	r2, [r3, #0]
        
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e007      	b.n	80036f4 <I2C_MasterReceive_RXNE+0x92>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f2:	601a      	str	r2, [r3, #0]
      }
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	6852      	ldr	r2, [r2, #4]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	e049      	b.n	800379a <I2C_MasterReceive_RXNE+0x138>
    }
    else
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	2b02      	cmp	r3, #2
 800370c:	d008      	beq.n	8003720 <I2C_MasterReceive_RXNE+0xbe>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e007      	b.n	8003730 <I2C_MasterReceive_RXNE+0xce>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800372e:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	6852      	ldr	r2, [r2, #4]
 800373a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800373e:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	1c59      	adds	r1, r3, #1
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6251      	str	r1, [r2, #36]	; 0x24
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	6912      	ldr	r2, [r2, #16]
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d107      	bne.n	800378c <I2C_MasterReceive_RXNE+0x12a>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff fde7 	bl	8003358 <HAL_I2C_MemRxCpltCallback>
 800378a:	e006      	b.n	800379a <I2C_MasterReceive_RXNE+0x138>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fdc4 	bl	8003322 <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 3U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d123      	bne.n	8003804 <I2C_MasterReceive_BTF+0x60>
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d006      	beq.n	80037d0 <I2C_MasterReceive_BTF+0x2c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d003      	beq.n	80037d0 <I2C_MasterReceive_BTF+0x2c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037ce:	d107      	bne.n	80037e0 <I2C_MasterReceive_BTF+0x3c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037de:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	1c59      	adds	r1, r3, #1
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6251      	str	r1, [r2, #36]	; 0x24
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	6912      	ldr	r2, [r2, #16]
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003802:	e08b      	b.n	800391c <I2C_MasterReceive_BTF+0x178>
  }
  else if(hi2c->XferCount == 2U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d175      	bne.n	80038fa <I2C_MasterReceive_BTF+0x156>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d023      	beq.n	800385c <I2C_MasterReceive_BTF+0xb8>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d020      	beq.n	800385c <I2C_MasterReceive_BTF+0xb8>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003820:	d01c      	beq.n	800385c <I2C_MasterReceive_BTF+0xb8>
    {
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d008      	beq.n	800383a <I2C_MasterReceive_BTF+0x96>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e007      	b.n	800384a <I2C_MasterReceive_BTF+0xa6>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003848:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	6852      	ldr	r2, [r2, #4]
 8003854:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e00f      	b.n	800387c <I2C_MasterReceive_BTF+0xd8>
    }
    else
    {
      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6852      	ldr	r2, [r2, #4]
 8003866:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800386a:	605a      	str	r2, [r3, #4]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c59      	adds	r1, r3, #1
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6251      	str	r1, [r2, #36]	; 0x24
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	6912      	ldr	r2, [r2, #16]
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6251      	str	r1, [r2, #36]	; 0x24
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	6912      	ldr	r2, [r2, #16]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d107      	bne.n	80038ea <I2C_MasterReceive_BTF+0x146>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fd38 	bl	8003358 <HAL_I2C_MemRxCpltCallback>
 80038e8:	e018      	b.n	800391c <I2C_MasterReceive_BTF+0x178>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fd15 	bl	8003322 <HAL_I2C_MasterRxCpltCallback>
 80038f8:	e010      	b.n	800391c <I2C_MasterReceive_BTF+0x178>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	1c59      	adds	r1, r3, #1
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6251      	str	r1, [r2, #36]	; 0x24
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	6912      	ldr	r2, [r2, #16]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	d116      	bne.n	8003968 <I2C_Master_SB+0x42>
  {
    if(hi2c->EventCount == 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	2b00      	cmp	r3, #0
 8003940:	d108      	bne.n	8003954 <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003950:	611a      	str	r2, [r3, #16]
 8003952:	e04c      	b.n	80039ee <I2C_Master_SB+0xc8>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	611a      	str	r2, [r3, #16]
 8003966:	e042      	b.n	80039ee <I2C_Master_SB+0xc8>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003970:	d118      	bne.n	80039a4 <I2C_Master_SB+0x7e>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b21      	cmp	r3, #33	; 0x21
 800397c:	d108      	bne.n	8003990 <I2C_Master_SB+0x6a>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	e02e      	b.n	80039ee <I2C_Master_SB+0xc8>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	611a      	str	r2, [r3, #16]
 80039a2:	e024      	b.n	80039ee <I2C_Master_SB+0xc8>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10e      	bne.n	80039ca <I2C_Master_SB+0xa4>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039b4:	b292      	uxth	r2, r2
 80039b6:	11d2      	asrs	r2, r2, #7
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f002 0206 	and.w	r2, r2, #6
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	f062 020f 	orn	r2, r2, #15
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	611a      	str	r2, [r3, #16]
 80039c8:	e011      	b.n	80039ee <I2C_Master_SB+0xc8>
      }
      else if(hi2c->EventCount == 1U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d10d      	bne.n	80039ee <I2C_Master_SB+0xc8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039da:	b292      	uxth	r2, r2
 80039dc:	11d2      	asrs	r2, r2, #7
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	f002 0206 	and.w	r2, r2, #6
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	f062 020e 	orn	r2, r2, #14
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b091      	sub	sp, #68	; 0x44
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b22      	cmp	r3, #34	; 0x22
 8003a42:	f040 8146 	bne.w	8003cd2 <I2C_Master_ADDR+0x2b8>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <I2C_Master_ADDR+0x52>
 8003a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d10b      	bne.n	8003a6c <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a54:	2300      	movs	r3, #0
 8003a56:	633b      	str	r3, [r7, #48]	; 0x30
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	e13d      	b.n	8003ce8 <I2C_Master_ADDR+0x2ce>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11d      	bne.n	8003ab0 <I2C_Master_ADDR+0x96>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a7c:	d118      	bne.n	8003ab0 <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa2:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	651a      	str	r2, [r3, #80]	; 0x50
 8003aae:	e11b      	b.n	8003ce8 <I2C_Master_ADDR+0x2ce>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d113      	bne.n	8003ae2 <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e0f3      	b.n	8003cca <I2C_Master_ADDR+0x2b0>
      }
      else if(hi2c->XferCount == 1U)   
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 8082 	bne.w	8003bf2 <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af4:	d137      	bne.n	8003b66 <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b04:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b14:	d113      	bne.n	8003b3e <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b24:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2300      	movs	r3, #0
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	e0c5      	b.n	8003cca <I2C_Master_ADDR+0x2b0>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	623b      	str	r3, [r7, #32]
 8003b52:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e0b1      	b.n	8003cca <I2C_Master_ADDR+0x2b0>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d026      	beq.n	8003bba <I2C_Master_ADDR+0x1a0>
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d023      	beq.n	8003bba <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b74:	2b12      	cmp	r3, #18
 8003b76:	d020      	beq.n	8003bba <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d008      	beq.n	8003b92 <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e007      	b.n	8003ba2 <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ba0:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	e087      	b.n	8003cca <I2C_Master_ADDR+0x2b0>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc8:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e06b      	b.n	8003cca <I2C_Master_ADDR+0x2b0>
        }
      }
      else if(hi2c->XferCount == 2U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d143      	bne.n	8003c84 <I2C_Master_ADDR+0x26a>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d01b      	beq.n	8003c3c <I2C_Master_ADDR+0x222>
        {
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c12:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	697b      	ldr	r3, [r7, #20]
          
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e012      	b.n	8003c62 <I2C_Master_ADDR+0x248>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c4a:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	693b      	ldr	r3, [r7, #16]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c70:	d12b      	bne.n	8003cca <I2C_Master_ADDR+0x2b0>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	6852      	ldr	r2, [r2, #4]
 8003c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	e022      	b.n	8003cca <I2C_Master_ADDR+0x2b0>
        }
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c92:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca2:	d107      	bne.n	8003cb4 <I2C_Master_ADDR+0x29a>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	6852      	ldr	r2, [r2, #4]
 8003cae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cb2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	651a      	str	r2, [r3, #80]	; 0x50
 8003cd0:	e00a      	b.n	8003ce8 <I2C_Master_ADDR+0x2ce>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3744      	adds	r7, #68	; 0x44
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d029      	beq.n	8003d64 <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c58      	adds	r0, r3, #1
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	6248      	str	r0, [r1, #36]	; 0x24
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d114      	bne.n	8003d64 <I2C_SlaveTransmit_TXE+0x70>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b29      	cmp	r3, #41	; 0x29
 8003d3e:	d111      	bne.n	8003d64 <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	6852      	ldr	r2, [r2, #4]
 8003d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4e:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2221      	movs	r2, #33	; 0x21
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2228      	movs	r2, #40	; 0x28
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd fc4a 	bl	80015f8 <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00f      	beq.n	8003da0 <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	1c58      	adds	r0, r3, #1
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	6248      	str	r0, [r1, #36]	; 0x24
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d02a      	beq.n	8003e1e <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c59      	adds	r1, r3, #1
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6251      	str	r1, [r2, #36]	; 0x24
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	6912      	ldr	r2, [r2, #16]
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d114      	bne.n	8003e1e <I2C_SlaveReceive_RXNE+0x72>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b2a      	cmp	r3, #42	; 0x2a
 8003df8:	d111      	bne.n	8003e1e <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	6852      	ldr	r2, [r2, #4]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2222      	movs	r2, #34	; 0x22
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2228      	movs	r2, #40	; 0x28
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fd fbfb 	bl	8001614 <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d010      	beq.n	8003e5c <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6251      	str	r1, [r2, #36]	; 0x24
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	6912      	ldr	r2, [r2, #16]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d001      	beq.n	8003e8a <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b80      	cmp	r3, #128	; 0x80
 8003e96:	d003      	beq.n	8003ea0 <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	81bb      	strh	r3, [r7, #12]
 8003e9e:	e002      	b.n	8003ea6 <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ea6:	89ba      	ldrh	r2, [r7, #12]
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd fbba 	bl	8001626 <HAL_I2C_AddrCallback>

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	6852      	ldr	r2, [r2, #4]
 8003ed8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003edc:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1a:	d11a      	bne.n	8003f52 <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b22      	cmp	r3, #34	; 0x22
 8003f26:	d005      	beq.n	8003f34 <I2C_Slave_STOPF+0x78>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b2a      	cmp	r3, #42	; 0x2a
 8003f32:	d107      	bne.n	8003f44 <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f42:	e006      	b.n	8003f52 <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d035      	beq.n	8003fc8 <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d110      	bne.n	8003f8c <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6251      	str	r1, [r2, #36]	; 0x24
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	6912      	ldr	r2, [r2, #16]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d110      	bne.n	8003fbc <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6251      	str	r1, [r2, #36]	; 0x24
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	6912      	ldr	r2, [r2, #16]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f043 0204 	orr.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8ab 	bl	800412c <I2C_ITError>
 8003fd6:	e02f      	b.n	8004038 <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b28      	cmp	r3, #40	; 0x28
 8003fdc:	d005      	beq.n	8003fea <I2C_Slave_STOPF+0x12e>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe2:	d002      	beq.n	8003fea <I2C_Slave_STOPF+0x12e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b29      	cmp	r3, #41	; 0x29
 8003fe8:	d111      	bne.n	800400e <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a15      	ldr	r2, [pc, #84]	; (8004044 <I2C_Slave_STOPF+0x188>)
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff f994 	bl	8003334 <HAL_I2C_ListenCpltCallback>
 800400c:	e014      	b.n	8004038 <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	2b22      	cmp	r3, #34	; 0x22
 8004014:	d002      	beq.n	800401c <I2C_Slave_STOPF+0x160>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b22      	cmp	r3, #34	; 0x22
 800401a:	d10d      	bne.n	8004038 <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd faee 	bl	8001614 <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	ffff0000 	.word	0xffff0000

08004048 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	60fb      	str	r3, [r7, #12]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	60bb      	str	r3, [r7, #8]

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d002      	beq.n	800406c <I2C_Slave_AF+0x24>
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d129      	bne.n	80040c0 <I2C_Slave_AF+0x78>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b28      	cmp	r3, #40	; 0x28
 8004070:	d126      	bne.n	80040c0 <I2C_Slave_AF+0x78>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2c      	ldr	r2, [pc, #176]	; (8004128 <I2C_Slave_AF+0xe0>)
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	6852      	ldr	r2, [r2, #4]
 8004082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004086:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004090:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a0:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff f93b 	bl	8003334 <HAL_I2C_ListenCpltCallback>
 80040be:	e02e      	b.n	800411e <I2C_Slave_AF+0xd6>
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b21      	cmp	r3, #33	; 0x21
 80040c4:	d126      	bne.n	8004114 <I2C_Slave_AF+0xcc>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <I2C_Slave_AF+0xe0>)
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2221      	movs	r2, #33	; 0x21
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	6852      	ldr	r2, [r2, #4]
 80040ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040f0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040fa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7fd fa73 	bl	80015f8 <HAL_I2C_SlaveTxCpltCallback>
 8004112:	e004      	b.n	800411e <I2C_Slave_AF+0xd6>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800411c:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	ffff0000 	.word	0xffff0000

0800412c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b29      	cmp	r3, #41	; 0x29
 8004142:	d002      	beq.n	800414a <I2C_ITError+0x1e>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b2a      	cmp	r3, #42	; 0x2a
 8004148:	d107      	bne.n	800415a <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2228      	movs	r2, #40	; 0x28
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004158:	e018      	b.n	800418c <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b60      	cmp	r3, #96	; 0x60
 8004164:	d00b      	beq.n	800417e <I2C_ITError+0x52>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004174:	d003      	beq.n	800417e <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800419a:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041aa:	d15f      	bne.n	800426c <I2C_ITError+0x140>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	6852      	ldr	r2, [r2, #4]
 80041b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ba:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d020      	beq.n	800420a <I2C_ITError+0xde>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	4a57      	ldr	r2, [pc, #348]	; (800432c <I2C_ITError+0x200>)
 80041ce:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fa39 	bl	800264c <HAL_DMA_Abort_IT>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8083 	beq.w	80042e8 <I2C_ITError+0x1bc>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004204:	4610      	mov	r0, r2
 8004206:	4798      	blx	r3
 8004208:	e06e      	b.n	80042e8 <I2C_ITError+0x1bc>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	4a47      	ldr	r2, [pc, #284]	; (800432c <I2C_ITError+0x200>)
 8004210:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fa18 	bl	800264c <HAL_DMA_Abort_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d062      	beq.n	80042e8 <I2C_ITError+0x1bc>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d109      	bne.n	8004244 <I2C_ITError+0x118>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c59      	adds	r1, r3, #1
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6251      	str	r1, [r2, #36]	; 0x24
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	6912      	ldr	r2, [r2, #16]
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004266:	4610      	mov	r0, r2
 8004268:	4798      	blx	r3
 800426a:	e03d      	b.n	80042e8 <I2C_ITError+0x1bc>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b60      	cmp	r3, #96	; 0x60
 8004276:	d123      	bne.n	80042c0 <I2C_ITError+0x194>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d109      	bne.n	80042a8 <I2C_ITError+0x17c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	1c59      	adds	r1, r3, #1
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6251      	str	r1, [r2, #36]	; 0x24
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	6912      	ldr	r2, [r2, #16]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff f85f 	bl	800337c <HAL_I2C_AbortCpltCallback>
 80042be:	e013      	b.n	80042e8 <I2C_ITError+0x1bc>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d109      	bne.n	80042e2 <I2C_ITError+0x1b6>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c59      	adds	r1, r3, #1
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6251      	str	r1, [r2, #36]	; 0x24
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	6912      	ldr	r2, [r2, #16]
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff f841 	bl	800336a <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b28      	cmp	r3, #40	; 0x28
 80042f2:	d116      	bne.n	8004322 <I2C_ITError+0x1f6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d110      	bne.n	8004322 <I2C_ITError+0x1f6>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <I2C_ITError+0x204>)
 8004304:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff f809 	bl	8003334 <HAL_I2C_ListenCpltCallback>
  }
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	08004335 	.word	0x08004335
 8004330:	ffff0000 	.word	0xffff0000

08004334 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004350:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	2200      	movs	r2, #0
 800435e:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	2200      	movs	r2, #0
 8004366:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b60      	cmp	r3, #96	; 0x60
 8004372:	d116      	bne.n	80043a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7fe ffee 	bl	800337c <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 80043a0:	e012      	b.n	80043c8 <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7fe ffd1 	bl	800336a <HAL_I2C_ErrorCallback>
}
 80043c8:	bf00      	nop
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8087 	beq.w	80044f8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043ea:	4b92      	ldr	r3, [pc, #584]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00c      	beq.n	8004410 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043f6:	4b8f      	ldr	r3, [pc, #572]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d112      	bne.n	8004428 <HAL_RCC_OscConfig+0x58>
 8004402:	4b8c      	ldr	r3, [pc, #560]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d06c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x126>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d168      	bne.n	80044f6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e22d      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x70>
 8004432:	4a80      	ldr	r2, [pc, #512]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004434:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e02e      	b.n	800449e <HAL_RCC_OscConfig+0xce>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10c      	bne.n	8004462 <HAL_RCC_OscConfig+0x92>
 8004448:	4a7a      	ldr	r2, [pc, #488]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800444a:	4b7a      	ldr	r3, [pc, #488]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4a77      	ldr	r2, [pc, #476]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004456:	4b77      	ldr	r3, [pc, #476]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e01d      	b.n	800449e <HAL_RCC_OscConfig+0xce>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800446a:	d10c      	bne.n	8004486 <HAL_RCC_OscConfig+0xb6>
 800446c:	4a71      	ldr	r2, [pc, #452]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800446e:	4b71      	ldr	r3, [pc, #452]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800447a:	4b6e      	ldr	r3, [pc, #440]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e00b      	b.n	800449e <HAL_RCC_OscConfig+0xce>
 8004486:	4a6b      	ldr	r2, [pc, #428]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4a68      	ldr	r2, [pc, #416]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004494:	4b67      	ldr	r3, [pc, #412]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d013      	beq.n	80044ce <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fd f9a7 	bl	80017f8 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ae:	f7fd f9a3 	bl	80017f8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b64      	cmp	r3, #100	; 0x64
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e1e1      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c0:	4b5c      	ldr	r3, [pc, #368]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0xde>
 80044cc:	e014      	b.n	80044f8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fd f993 	bl	80017f8 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d6:	f7fd f98f 	bl	80017f8 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b64      	cmp	r3, #100	; 0x64
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1cd      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e8:	4b52      	ldr	r3, [pc, #328]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f0      	bne.n	80044d6 <HAL_RCC_OscConfig+0x106>
 80044f4:	e000      	b.n	80044f8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d063      	beq.n	80045cc <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004504:	4b4b      	ldr	r3, [pc, #300]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004510:	4b48      	ldr	r3, [pc, #288]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	2b08      	cmp	r3, #8
 800451a:	d11c      	bne.n	8004556 <HAL_RCC_OscConfig+0x186>
 800451c:	4b45      	ldr	r3, [pc, #276]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004528:	4b42      	ldr	r3, [pc, #264]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_OscConfig+0x170>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d001      	beq.n	8004540 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e1a1      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	493c      	ldr	r1, [pc, #240]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004542:	4b3c      	ldr	r3, [pc, #240]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004554:	e03a      	b.n	80045cc <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d020      	beq.n	80045a0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800455e:	4b36      	ldr	r3, [pc, #216]	; (8004638 <HAL_RCC_OscConfig+0x268>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004564:	f7fd f948 	bl	80017f8 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456c:	f7fd f944 	bl	80017f8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e182      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457e:	4b2d      	ldr	r3, [pc, #180]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458a:	492a      	ldr	r1, [pc, #168]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800458c:	4b29      	ldr	r3, [pc, #164]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
 800459e:	e015      	b.n	80045cc <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <HAL_RCC_OscConfig+0x268>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a6:	f7fd f927 	bl	80017f8 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fd f923 	bl	80017f8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e161      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c0:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f0      	bne.n	80045ae <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d039      	beq.n	800464c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d019      	beq.n	8004614 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e0:	4b16      	ldr	r3, [pc, #88]	; (800463c <HAL_RCC_OscConfig+0x26c>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e6:	f7fd f907 	bl	80017f8 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ee:	f7fd f903 	bl	80017f8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e141      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004600:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_RCC_OscConfig+0x264>)
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800460c:	2001      	movs	r0, #1
 800460e:	f000 facf 	bl	8004bb0 <RCC_Delay>
 8004612:	e01b      	b.n	800464c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_RCC_OscConfig+0x26c>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fd f8ed 	bl	80017f8 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004620:	e00e      	b.n	8004640 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004622:	f7fd f8e9 	bl	80017f8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d907      	bls.n	8004640 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e127      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
 8004634:	40021000 	.word	0x40021000
 8004638:	42420000 	.word	0x42420000
 800463c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	4b92      	ldr	r3, [pc, #584]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ea      	bne.n	8004622 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a6 	beq.w	80047a6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465e:	4b8b      	ldr	r3, [pc, #556]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10d      	bne.n	8004686 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	4a88      	ldr	r2, [pc, #544]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800466c:	4b87      	ldr	r3, [pc, #540]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	61d3      	str	r3, [r2, #28]
 8004676:	4b85      	ldr	r3, [pc, #532]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b82      	ldr	r3, [pc, #520]	; (8004890 <HAL_RCC_OscConfig+0x4c0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d118      	bne.n	80046c4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004692:	4a7f      	ldr	r2, [pc, #508]	; (8004890 <HAL_RCC_OscConfig+0x4c0>)
 8004694:	4b7e      	ldr	r3, [pc, #504]	; (8004890 <HAL_RCC_OscConfig+0x4c0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fd f8ab 	bl	80017f8 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fd f8a7 	bl	80017f8 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b64      	cmp	r3, #100	; 0x64
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e0e5      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	4b75      	ldr	r3, [pc, #468]	; (8004890 <HAL_RCC_OscConfig+0x4c0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x30a>
 80046cc:	4a6f      	ldr	r2, [pc, #444]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80046ce:	4b6f      	ldr	r3, [pc, #444]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6213      	str	r3, [r2, #32]
 80046d8:	e02d      	b.n	8004736 <HAL_RCC_OscConfig+0x366>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x32c>
 80046e2:	4a6a      	ldr	r2, [pc, #424]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80046e4:	4b69      	ldr	r3, [pc, #420]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 0301 	bic.w	r3, r3, #1
 80046ec:	6213      	str	r3, [r2, #32]
 80046ee:	4a67      	ldr	r2, [pc, #412]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80046f0:	4b66      	ldr	r3, [pc, #408]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	6213      	str	r3, [r2, #32]
 80046fa:	e01c      	b.n	8004736 <HAL_RCC_OscConfig+0x366>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	2b05      	cmp	r3, #5
 8004702:	d10c      	bne.n	800471e <HAL_RCC_OscConfig+0x34e>
 8004704:	4a61      	ldr	r2, [pc, #388]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004706:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f043 0304 	orr.w	r3, r3, #4
 800470e:	6213      	str	r3, [r2, #32]
 8004710:	4a5e      	ldr	r2, [pc, #376]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004712:	4b5e      	ldr	r3, [pc, #376]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6213      	str	r3, [r2, #32]
 800471c:	e00b      	b.n	8004736 <HAL_RCC_OscConfig+0x366>
 800471e:	4a5b      	ldr	r2, [pc, #364]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004720:	4b5a      	ldr	r3, [pc, #360]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	6213      	str	r3, [r2, #32]
 800472a:	4a58      	ldr	r2, [pc, #352]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800472c:	4b57      	ldr	r3, [pc, #348]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f023 0304 	bic.w	r3, r3, #4
 8004734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d015      	beq.n	800476a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473e:	f7fd f85b 	bl	80017f8 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004744:	e00a      	b.n	800475c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fd f857 	bl	80017f8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	; 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e093      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	4b4b      	ldr	r3, [pc, #300]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ee      	beq.n	8004746 <HAL_RCC_OscConfig+0x376>
 8004768:	e014      	b.n	8004794 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fd f845 	bl	80017f8 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fd f841 	bl	80017f8 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e07d      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004788:	4b40      	ldr	r3, [pc, #256]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ee      	bne.n	8004772 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479a:	4a3c      	ldr	r2, [pc, #240]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800479c:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d069      	beq.n	8004882 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ae:	4b37      	ldr	r3, [pc, #220]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d061      	beq.n	800487e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d146      	bne.n	8004850 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b34      	ldr	r3, [pc, #208]	; (8004894 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fd f816 	bl	80017f8 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fd f812 	bl	80017f8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e050      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e2:	4b2a      	ldr	r3, [pc, #168]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f6:	d108      	bne.n	800480a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047f8:	4924      	ldr	r1, [pc, #144]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800480a:	4820      	ldr	r0, [pc, #128]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800480c:	4b1f      	ldr	r3, [pc, #124]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a19      	ldr	r1, [r3, #32]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	430b      	orrs	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	2201      	movs	r2, #1
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fc ffe6 	bl	80017f8 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fc ffe2 	bl	80017f8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e020      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x460>
 800484e:	e018      	b.n	8004882 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_RCC_OscConfig+0x4c4>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004856:	f7fc ffcf 	bl	80017f8 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485e:	f7fc ffcb 	bl	80017f8 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e009      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_OscConfig+0x4bc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f0      	bne.n	800485e <HAL_RCC_OscConfig+0x48e>
 800487c:	e001      	b.n	8004882 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	40007000 	.word	0x40007000
 8004894:	42420060 	.word	0x42420060

08004898 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80048a6:	4b7e      	ldr	r3, [pc, #504]	; (8004aa0 <HAL_RCC_ClockConfig+0x208>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0207 	and.w	r2, r3, #7
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d210      	bcs.n	80048d6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b4:	497a      	ldr	r1, [pc, #488]	; (8004aa0 <HAL_RCC_ClockConfig+0x208>)
 80048b6:	4b7a      	ldr	r3, [pc, #488]	; (8004aa0 <HAL_RCC_ClockConfig+0x208>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048c4:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCC_ClockConfig+0x208>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0207 	and.w	r2, r3, #7
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e0e0      	b.n	8004a98 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d020      	beq.n	8004924 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ee:	4a6d      	ldr	r2, [pc, #436]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 80048f0:	4b6c      	ldr	r3, [pc, #432]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048f8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004906:	4a67      	ldr	r2, [pc, #412]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004908:	4b66      	ldr	r3, [pc, #408]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004910:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004912:	4964      	ldr	r1, [pc, #400]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004914:	4b63      	ldr	r3, [pc, #396]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d06a      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004938:	4b5a      	ldr	r3, [pc, #360]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d115      	bne.n	8004970 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0a7      	b.n	8004a98 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d107      	bne.n	8004960 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004950:	4b54      	ldr	r3, [pc, #336]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e09b      	b.n	8004a98 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	4b50      	ldr	r3, [pc, #320]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e093      	b.n	8004a98 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004970:	494c      	ldr	r1, [pc, #304]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004972:	4b4c      	ldr	r3, [pc, #304]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004982:	f7fc ff39 	bl	80017f8 <HAL_GetTick>
 8004986:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d112      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004992:	f7fc ff31 	bl	80017f8 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e077      	b.n	8004a98 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049a8:	4b3e      	ldr	r3, [pc, #248]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d1ee      	bne.n	8004992 <HAL_RCC_ClockConfig+0xfa>
 80049b4:	e027      	b.n	8004a06 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d11d      	bne.n	80049fa <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c0:	f7fc ff1a 	bl	80017f8 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e060      	b.n	8004a98 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d6:	4b33      	ldr	r3, [pc, #204]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d1ee      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x128>
 80049e2:	e010      	b.n	8004a06 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7fc ff08 	bl	80017f8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e04e      	b.n	8004a98 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049fa:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ee      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004a06:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCC_ClockConfig+0x208>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0207 	and.w	r2, r3, #7
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d910      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a14:	4922      	ldr	r1, [pc, #136]	; (8004aa0 <HAL_RCC_ClockConfig+0x208>)
 8004a16:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <HAL_RCC_ClockConfig+0x208>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a24:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_RCC_ClockConfig+0x208>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0207 	and.w	r2, r3, #7
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e030      	b.n	8004a98 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a42:	4918      	ldr	r1, [pc, #96]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004a44:	4b17      	ldr	r3, [pc, #92]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d009      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a60:	4910      	ldr	r1, [pc, #64]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a74:	f000 f81c 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a78:	4601      	mov	r1, r0
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x20c>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_RCC_ClockConfig+0x210>)
 8004a86:	5cd3      	ldrb	r3, [r2, r3]
 8004a88:	fa21 f303 	lsr.w	r3, r1, r3
 8004a8c:	4a07      	ldr	r2, [pc, #28]	; (8004aac <HAL_RCC_ClockConfig+0x214>)
 8004a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a90:	2000      	movs	r0, #0
 8004a92:	f7fc fe6f 	bl	8001774 <HAL_InitTick>
  
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	08004ddc 	.word	0x08004ddc
 8004aac:	20000000 	.word	0x20000000

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	b490      	push	{r4, r7}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ab8:	1d3c      	adds	r4, r7, #4
 8004aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ac0:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ada:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d002      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x40>
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d003      	beq.n	8004af6 <HAL_RCC_GetSysClockFreq+0x46>
 8004aee:	e02d      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004af0:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004af2:	623b      	str	r3, [r7, #32]
      break;
 8004af4:	e02d      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	0c9b      	lsrs	r3, r3, #18
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b02:	4413      	add	r3, r2
 8004b04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d013      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b14:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0c5b      	lsrs	r3, r3, #17
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b22:	4413      	add	r3, r2
 8004b24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b28:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4a0f      	ldr	r2, [pc, #60]	; (8004b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b2e:	fb02 f203 	mul.w	r2, r2, r3
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3a:	e004      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	623b      	str	r3, [r7, #32]
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b4e:	623b      	str	r3, [r7, #32]
      break;
 8004b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b52:	6a3b      	ldr	r3, [r7, #32]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3728      	adds	r7, #40	; 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc90      	pop	{r4, r7}
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	08004dc8 	.word	0x08004dc8
 8004b64:	08004dd8 	.word	0x08004dd8
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	007a1200 	.word	0x007a1200
 8004b70:	003d0900 	.word	0x003d0900

08004b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	20000000 	.word	0x20000000

08004b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b8c:	f7ff fff2 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
 8004b90:	4601      	mov	r1, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4a03      	ldr	r2, [pc, #12]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ba0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	08004dec 	.word	0x08004dec

08004bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <RCC_Delay+0x34>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <RCC_Delay+0x38>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	0a5b      	lsrs	r3, r3, #9
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8004bcc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1e5a      	subs	r2, r3, #1
 8004bd2:	60fa      	str	r2, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f9      	bne.n	8004bcc <RCC_Delay+0x1c>
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000
 8004be8:	10624dd3 	.word	0x10624dd3

08004bec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d07d      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0c:	4b4f      	ldr	r3, [pc, #316]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c18:	4a4c      	ldr	r2, [pc, #304]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1a:	4b4c      	ldr	r3, [pc, #304]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c22:	61d3      	str	r3, [r2, #28]
 8004c24:	4b49      	ldr	r3, [pc, #292]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c34:	4b46      	ldr	r3, [pc, #280]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d118      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c40:	4a43      	ldr	r2, [pc, #268]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c42:	4b43      	ldr	r3, [pc, #268]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c4c:	f7fc fdd4 	bl	80017f8 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c52:	e008      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fc fdd0 	bl	80017f8 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e06d      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c66:	4b3a      	ldr	r3, [pc, #232]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c72:	4b36      	ldr	r3, [pc, #216]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d02e      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d027      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c90:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c9a:	4b2e      	ldr	r3, [pc, #184]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca0:	4b2c      	ldr	r3, [pc, #176]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ca6:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d014      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fc fd9f 	bl	80017f8 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbe:	f7fc fd9b 	bl	80017f8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e036      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ee      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ce0:	491a      	ldr	r1, [pc, #104]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce2:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf8:	4a14      	ldr	r2, [pc, #80]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d10:	490e      	ldr	r1, [pc, #56]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d2e:	4907      	ldr	r1, [pc, #28]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
 8004d54:	42420440 	.word	0x42420440

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	4e0c      	ldr	r6, [pc, #48]	; (8004d90 <__libc_init_array+0x38>)
 8004d5e:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d60:	1ba4      	subs	r4, r4, r6
 8004d62:	10a4      	asrs	r4, r4, #2
 8004d64:	42a5      	cmp	r5, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	f000 f822 	bl	8004db0 <_init>
 8004d6c:	2500      	movs	r5, #0
 8004d6e:	4e0a      	ldr	r6, [pc, #40]	; (8004d98 <__libc_init_array+0x40>)
 8004d70:	4c0a      	ldr	r4, [pc, #40]	; (8004d9c <__libc_init_array+0x44>)
 8004d72:	1ba4      	subs	r4, r4, r6
 8004d74:	10a4      	asrs	r4, r4, #2
 8004d76:	42a5      	cmp	r5, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d80:	4798      	blx	r3
 8004d82:	3501      	adds	r5, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d8a:	4798      	blx	r3
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	08004df4 	.word	0x08004df4
 8004d94:	08004df4 	.word	0x08004df4
 8004d98:	08004df4 	.word	0x08004df4
 8004d9c:	08004df8 	.word	0x08004df8

08004da0 <memset>:
 8004da0:	4603      	mov	r3, r0
 8004da2:	4402      	add	r2, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
